// Местоположение: next.config.mjs (ВАЖНО: ИМЯ И РАСШИРЕНИЕ ИЗМЕНИЛИСЬ)
// Метафора: "Генеральный план застройки" или "Устав города".
// Этот файл устанавливает глобальные правила для всего проекта,
// которые Next.js использует при сборке и запуске.

/** @type {import('next').NextConfig} */
const nextConfig = {
  // --- ПРАВИЛА "СТРОЙКИ" (ОПТИМИЗАЦИНЯ СБОРКИ) ---
  eslint: {
    // Распоряжение "не отвлекать строителей".
    // Мы говорим системе: "Когда ты строишь финальную версию сайта для пользователей (npm run build),
    // не нужно тратить время на повторную проверку кода 'инспектором' (ESLint)".
    // Это ускоряет процесс "сдачи объекта" (деплой), так как мы предполагаем,
    // что все проверки уже были выполнены на этапе разработки.
    ignoreDuringBuilds: true,
  },

  // --- ПРАВИЛА "БЕЗОПАСНОСТИ" (HTTP-ЗАГОЛОВКИ) ---
  // Это наш "паспортный контроль" на въезде в наш "город" (сайт).
  // Здесь мы настраиваем инструкции (заголовки), которые наш сервер будет
  // отправлять браузеру каждого посетителя.
  async headers() {
    return [
      {
        // Применяем следующие правила ко всем возможным адресам внутри нашего сайта.
        // `/(.*)` — это "маска", которая подходит для любого пути.
        source: '/(.*)',
        headers: [
          {
            // Название правила безопасности.
            key: 'X-Frame-Options',
            // Значение правила: 'SAMEORIGIN' — "только для своих".
            // Это запрещает другим сайтам встраивать наш сайт в "окошко" (iframe).
            // Такая мера является ключевой защитой от мошеннической техники "кликджекинг",
            // когда пользователь думает, что нажимает на одно, а на самом деле — на невидимую кнопку нашего сайта.
            value: 'SAMEORIGIN',
          },
          // Сюда в будущем можно добавлять и другие заголовки безопасности,
          // например, 'Strict-Transport-Security' для принудительного использования HTTPS.
        ],
      },
    ];
  },

  // --- ПРАВИЛА "УЛИЧНЫХ УКАЗАТЕЛЕЙ" (ПЕРЕНАПРАВЛЕНИЯ) ---
  // Здесь мы настраиваем автоматические перенаправления.
  // Если пользователь попал на "старую улицу", мы вежливо "телепортируем" его на новую.
  async redirects() {
    return [
      {
        source: '/help',
        destination: '/support',
        permanent: true,
      },
      {
        source: '/pomagite',
        destination: '/support',
        permanent: true,
      },
      {
        // Next.js автоматически обрабатывает кириллические URL
        source: '/помощь',
        destination: '/support',
        permanent: true,
      },
      {
        source: '/поддержка',
        destination: '/support',
        permanent: true,
      },
      {
        source: '/обратнаясвязь',
        destination: '/support',
        permanent: true,
      },
    ];
  },

  // Здесь зарезервировано место для будущих глобальных настроек.
  // Например, если мы начнем загружать изображения с внешнего сервера (CDN),
  // нам нужно будет "прописать" его адрес здесь:
  // images: {
  //   remotePatterns: [
  //     {
  //       protocol: 'https',
  //       hostname: 'cdn.example.com',
  //     },
  //   ],
  // },
};

export default nextConfig;
