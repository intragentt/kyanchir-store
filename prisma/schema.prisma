// Местоположение: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String            @id @default(cuid())
  sku              String?           @unique
  name             String
  alternativeNames AlternativeName[]
  description      String?           @db.Text
  variants         Variant[]
  attributes       Attribute[]
  categories       Category[]        @relation("ProductToCategory")
  status           Status            @default(DRAFT)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tags             Tag[]             @relation("ProductTags")
}

model Variant {
  id                 String      @id @default(cuid())
  productId          String
  product            Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  color              String?
  images             Image[]
  price              Int
  oldPrice           Int?
  discountPercentage Int?
  discountExpiresAt  DateTime?
  bonusPoints        Int?
  inventory          Inventory[]
  isFeatured         Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  @@unique([productId, color])
}

model Image {
  id        String  @id @default(cuid())
  url       String  @db.Text
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  order     Int     @default(0)
}

model Inventory {
  id        String  @id @default(cuid())
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])
  stock     Int
  @@unique([variantId, sizeId])
}

model Size {
  id        String      @id @default(cuid())
  value     String      @unique
  inventory Inventory[]
}

model Attribute {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  key       String
  value     String
  isMain    Boolean @default(true)
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] @relation("ProductToCategory")
  parentId String?
  parent   Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("SubCategories")
  order    Int       @default(0)
  // --- ДОБАВЛЕНО: Поле для цвета ---
  color    String?
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] @relation("ProductTags")
  order    Int       @default(0)
  // --- ДОБАВЛЕНО: Поле для цвета ---
  color    String?
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model AlternativeName {
  id        String  @id @default(cuid())
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}