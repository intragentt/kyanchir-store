// Местоположение: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String            @id @default(cuid())
  article          String?           @unique
  name             String            @unique
  alternativeNames AlternativeName[]
  description      String?           @db.Text
  variants         ProductVariant[]
  attributes       Attribute[]
  categories       Category[]        @relation("ProductToCategory")
  statusId         String
  status           Status            @relation(fields: [statusId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tags             Tag[]             @relation("ProductTags")
  moyskladId       String?           @unique
  archived         Boolean           @default(false) // <-- ДОБАВЬТЕ ЭТУ СТРОКУ
}

model ProductVariant {
  id                 String        @id @default(cuid())
  productId          String
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  color              String?
  images             Image[]
  price              Int
  oldPrice           Int?
  costPrice          Int?
  discountPercentage Int?
  discountExpiresAt  DateTime?
  bonusPoints        Int?
  sizes              ProductSize[]
  isFeatured         Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  moySkladId         String?       @unique
  @@unique([productId, color])
}

model Image {
  id        String         @id @default(cuid())
  url       String         @db.Text
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  order     Int            @default(0)
}

model ProductSize {
  id               String      @id @default(cuid())
  code             String?     // <-- ДОБАВЬТЕ ЭТУ СТРОКУ
  article          String?
  moySkladHref     String?
  moySkladType     String      @default("variant")
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  sizeId           String
  size             Size        @relation(fields: [sizeId], references: [id])
  stock            Int
  price            Int?
  oldPrice         Int?
  orderItems       OrderItem[]
  moyskladId       String?          
  archived         Boolean           @default(false) // <-- ДОБАВЬТЕ ЭТУ СТРОКУ

  @@unique([productVariantId, sizeId])
}

model Size {
  id           String        @id @default(cuid())
  value        String        @unique
  productSizes ProductSize[]
}

model Attribute {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  key       String
  value     String
  isMain    Boolean @default(true)
}

model Category {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  products    Product[]    @relation("ProductToCategory")
  parentId    String?
  parent      Category?    @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[]   @relation("SubCategories")
  order       Int          @default(0)
  color       String?
  presetItems PresetItem[]
  moyskladId  String?      @unique
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  products    Product[]    @relation("ProductTags")
  order       Int          @default(0)
  color       String?
  presetItems PresetItem[]
}

model AlternativeName {
  id        String  @id @default(cuid())
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Status {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model OrderStatus {
  id     String  @id @default(cuid())
  name   String  @unique
  orders Order[]
}

model Order {
  id                   String      @id @default(cuid())
  orderNumber          String      @unique
  statusId             String
  status               OrderStatus @relation(fields: [statusId], references: [id])
  items                OrderItem[]
  totalAmount          Int
  customerName         String
  customerEmail        String
  customerPhone        String
  shippingAddress      String      @db.Text
  shippingCity         String
  shippingPostalCode   String
  userId               String?
  user                 User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  moySkladId           String?     @unique
  cdekId               String?     @unique
  paymentTransactionId String?     @unique
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model OrderItem {
  id                 String      @id @default(cuid())
  orderId            String
  order              Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productSizeId      String
  productSize        ProductSize @relation(fields: [productSizeId], references: [id], onDelete: Restrict)
  quantity           Int
  priceAtPurchase    Int
  productName        String
  productArticle     String?
  productColor       String?
  productSizeValue   String
}

model FilterPreset {
  id        String       @id @default(cuid())
  name      String       @unique
  isDefault Boolean      @default(false)
  items     PresetItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model PresetItem {
  id         String         @id @default(cuid())
  presetId   String
  preset     FilterPreset   @relation(fields: [presetId], references: [id], onDelete: Cascade)
  typeId     String
  type       PresetItemType @relation(fields: [typeId], references: [id])
  categoryId String?
  category   Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tagId      String?
  tag        Tag?           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  order      Int
  @@unique([presetId, categoryId])
  @@unique([presetId, tagId])
}

model PresetItemType {
  id    String       @id @default(cuid())
  name  String       @unique
  items PresetItem[]
}

model UserRole {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  telegramId    String?      @unique
  phone         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  loginTokens   LoginToken[]
  roleId        String
  role          UserRole     @relation(fields: [roleId], references: [id])
  bonusPoints   Int          @default(0)
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  attempts   Int      @default(0)
  @@unique([identifier, token])
}

model LoginToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model AgentRole {
  id     String         @id @default(cuid())
  name   String         @unique
  agents SupportAgent[]
}

model TicketStatus {
  id      String          @id @default(cuid())
  name    String          @unique
  tickets SupportTicket[]
}

model TicketSource {
  id      String          @id @default(cuid())
  name    String          @unique
  tickets SupportTicket[]
}

model SenderType {
  id       String           @id @default(cuid())
  name     String           @unique
  messages SupportMessage[]
}

model SupportAgent {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  telegramId       String?          @unique
  internalUsername String           @unique
  phone            String?
  roleId           String
  role             AgentRole        @relation(fields: [roleId], references: [id])
  messages         SupportMessage[]
  createdAt        DateTime         @default(now())
}

model SupportRoute {
  id            String @id @default(cuid())
  kyanchirEmail String @unique
}

model SupportTicket {
  id            String           @id @default(cuid())
  clientEmail   String
  clientName    String?
  subject       String
  statusId      String
  status        TicketStatus     @relation(fields: [statusId], references: [id])
  sourceId      String
  source        TicketSource     @relation(fields: [sourceId], references: [id])
  messages      SupportMessage[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  assignedEmail String?
}

model SupportMessage {
  id           String        @id @default(cuid())
  ticketId     String
  ticket       SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  content      String        @db.Text
  senderTypeId String
  senderType   SenderType    @relation(fields: [senderTypeId], references: [id])
  agentId      String?
  agent        SupportAgent? @relation(fields: [agentId], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now())
}

model CodeRule {
  id           String            @id @default(cuid())
  assignedCode String            @unique
  synonyms     CategorySynonym[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model CategorySynonym {
  id        String   @id @default(cuid())
  name      String   @unique
  ruleId    String
  rule      CodeRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- НАЧАЛО НОВОЙ МОДЕЛИ ДЛЯ СЧЕТЧИКА АРТИКУЛОВ ---
model SkuSequence {
  prefix     String @id @unique // e.g., "KYN-KP2-0925"
  lastNumber Int    @default(0)
}
// --- КОНЕЦ НОВОЙ МОДЕЛИ ---