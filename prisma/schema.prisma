// Местоположение: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === МОДЕЛИ E-COMMERCE ===
model Product {
  id               String            @id @default(cuid())
  sku              String?           @unique
  name             String
  alternativeNames AlternativeName[]
  description      String?           @db.Text
  variants         Variant[]
  attributes       Attribute[]
  categories       Category[]        @relation("ProductToCategory")
  status           Status            @default(DRAFT)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tags             Tag[]             @relation("ProductTags")
  moyskladId       String?           @unique
}

model Variant {
  id                 String      @id @default(cuid())
  productId          String
  product            Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  color              String?
  images             Image[]
  price              Int
  oldPrice           Int?
  discountPercentage Int?
  discountExpiresAt  DateTime?
  bonusPoints        Int?
  inventory          Inventory[]
  isFeatured         Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  moyskladId         String?     @unique

  @@unique([productId, color])
}

model Image {
  id        String  @id @default(cuid())
  url       String  @db.Text
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  order     Int     @default(0)
}

model Inventory {
  id        String  @id @default(cuid())
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])
  stock     Int
  @@unique([variantId, sizeId])
}

model Size {
  id        String      @id @default(cuid())
  value     String      @unique
  inventory Inventory[]
}

model Attribute {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  key       String
  value     String
  isMain    Boolean @default(true)
}

model Category {
  id          String       @id @default(cuid())
  // --- НАЧАЛО ИЗМЕНЕНИЙ ---
  name        String       // УБРАЛИ @unique, чтобы разрешить дубликаты имен из МойСклад
  // --- КОНЕЦ ИЗМЕНЕНИЙ ---
  products    Product[]    @relation("ProductToCategory")
  parentId    String?
  parent      Category?    @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[]   @relation("SubCategories")
  order       Int          @default(0)
  color       String?
  presetItems PresetItem[]
  moyskladId  String?      @unique
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  products    Product[]    @relation("ProductTags")
  order       Int          @default(0)
  color       String?
  presetItems PresetItem[]
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model AlternativeName {
  id        String  @id @default(cuid())
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model FilterPreset {
  id        String       @id @default(cuid())
  name      String       @unique
  isDefault Boolean      @default(false)
  items     PresetItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model PresetItem {
  id         String         @id @default(cuid())
  presetId   String
  preset     FilterPreset   @relation(fields: [presetId], references: [id], onDelete: Cascade)
  type       PresetItemType
  categoryId String?
  category   Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tagId      String?
  tag        Tag?           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  order      Int
  @@unique([presetId, categoryId])
  @@unique([presetId, tagId])
}

enum PresetItemType {
  CATEGORY
  TAG
}

// === МОДЕЛИ АУТЕНТИФИКАЦИИ И ПОЛЬЗОВАТЕЛЕЙ ===
enum UserRole {
  CLIENT
  ADMIN
  MANAGEMENT
  SUPPORT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  telegramId    String?   @unique
  phone         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  loginTokens   LoginToken[]
  role          UserRole  @default(CLIENT)
  bonusPoints   Int       @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  attempts   Int      @default(0)
  @@unique([identifier, token])
}

model LoginToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// === МОДЕЛИ СИСТЕМЫ ПОДДЕРЖКИ (SUPPORT DESK) ===
enum AgentRole {
  SUPPORT
  MANAGEMENT
  ADMIN
}

enum TicketStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

enum TicketSource {
  EMAIL
  WEB_FORM
  TELEGRAM_BOT
}

enum SenderType {
  CLIENT
  AGENT
}

model SupportAgent {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  telegramId       String?          @unique
  internalUsername String           @unique
  phone            String?
  role             AgentRole
  messages         SupportMessage[]
  createdAt        DateTime         @default(now())
}

model SupportRoute {
  id            String @id @default(cuid())
  kyanchirEmail String @unique
}

model SupportTicket {
  id            String           @id @default(cuid())
  clientEmail   String
  clientName    String?
  subject       String
  status        TicketStatus     @default(OPEN)
  source        TicketSource
  messages      SupportMessage[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  assignedEmail String?
}

model SupportMessage {
  id         String        @id @default(cuid())
  ticketId   String
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  content    String        @db.Text
  senderType SenderType
  agentId    String?
  agent      SupportAgent? @relation(fields: [agentId], references: [id], onDelete: SetNull)
  createdAt  DateTime      @default(now())
}