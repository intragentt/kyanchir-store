// prisma/seed.ts
import {
  PrismaClient,
  PresetItemType,
  Status,
  AgentRole,
} from '@prisma/client';

const prisma = new PrismaClient();

// ---------- helpers ----------
async function upsertSize(value: string) {
  return prisma.size.upsert({
    where: { value },
    update: {},
    create: { value },
  });
}

async function upsertTag(name: string, color?: string, order = 0) {
  return prisma.tag.upsert({
    where: { name },
    update: { color, order },
    create: { name, color, order },
  });
}

async function upsertCategory(
  name: string,
  opts?: { parentId?: string; color?: string; order?: number },
) {
  return prisma.category.upsert({
    where: { name },
    update: {
      parentId: opts?.parentId ?? null,
      color: opts?.color,
      order: opts?.order ?? 0,
    },
    create: {
      name,
      parentId: opts?.parentId,
      color: opts?.color,
      order: opts?.order ?? 0,
    },
  });
}

async function upsertSupportAgent(data: {
  name: string;
  email: string;
  telegramId?: string | null;
  username: string;
  phone?: string | null;
  role: AgentRole;
}) {
  const existingAgent = await prisma.supportAgent.findUnique({
    where: { email: data.email },
  });
  const agentData = {
    name: data.name,
    email: data.email,
    telegramId: data.telegramId,
    internalUsername: data.username,
    phone: data.phone,
    role: data.role,
  };
  Object.keys(agentData).forEach(
    (key) =>
      agentData[key as keyof typeof agentData] === undefined &&
      delete agentData[key as keyof typeof agentData],
  );
  if (existingAgent) {
    return prisma.supportAgent.update({
      where: { email: data.email },
      data: agentData,
    });
  } else {
    // @ts-ignore
    return prisma.supportAgent.create({ data: agentData });
  }
}

type VariantInput = {
  color: string;
  price: number;
  oldPrice?: number | null;
  isFeatured?: boolean;
  images?: string[];
  stockBySize?: Record<string, number>;
};
type ProductInput = {
  sku?: string | null;
  name: string;
  alternativeNames?: string[];
  description?: string | null;
  status?: Status;
  categoryNames?: string[];
  tagNames?: string[];
  attributes?: { key: string; value: string; isMain?: boolean }[];
  variants: VariantInput[];
};

async function createProductWithRelations(data: ProductInput) {
  const product = await prisma.product.create({
    data: {
      sku: data.sku ?? null,
      name: data.name,
      description: data.description ?? null,
      status: data.status ?? Status.PUBLISHED,
    },
  });
  if (data.alternativeNames?.length) {
    await prisma.alternativeName.createMany({
      data: data.alternativeNames.map((value) => ({
        value,
        productId: product.id,
      })),
    });
  }
  if (data.attributes?.length) {
    await prisma.attribute.createMany({
      data: data.attributes.map((a) => ({
        productId: product.id,
        key: a.key,
        value: a.value,
        isMain: a.isMain ?? true,
      })),
    });
  }
  if (data.categoryNames?.length) {
    const cats = await prisma.category.findMany({
      where: { name: { in: data.categoryNames } },
    });
    await prisma.product.update({
      where: { id: product.id },
      data: { categories: { connect: cats.map((c) => ({ id: c.id })) } },
    });
  }
  if (data.tagNames?.length) {
    const tags = await prisma.tag.findMany({
      where: { name: { in: data.tagNames } },
    });
    await prisma.product.update({
      where: { id: product.id },
      data: { tags: { connect: tags.map((t) => ({ id: t.id })) } },
    });
  }
  for (const v of data.variants) {
    const variant = await prisma.variant.create({
      data: {
        productId: product.id,
        color: v.color,
        price: v.price,
        oldPrice: v.oldPrice ?? null,
        isFeatured: v.isFeatured ?? false,
      },
    });
    if (v.images?.length) {
      await prisma.image.createMany({
        data: v.images.map((url, i) => ({
          variantId: variant.id,
          url,
          order: i + 1,
        })),
      });
    }
    if (v.stockBySize) {
      const sizes = Object.keys(v.stockBySize);
      const dbSizes = await prisma.size.findMany({
        where: { value: { in: sizes } },
      });
      const sizeMap = Object.fromEntries(dbSizes.map((s) => [s.value, s.id]));
      const inv = sizes.map((s) => ({
        variantId: variant.id,
        sizeId: sizeMap[s],
        stock: v.stockBySize![s],
      }));
      await prisma.inventory.createMany({ data: inv });
    }
  }
  return product;
}

// ---------- main ----------
async function main() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  await prisma.supportMessage.deleteMany();
  await prisma.supportTicket.deleteMany();
  await prisma.supportRoute.deleteMany();
  await prisma.supportAgent.deleteMany();
  await prisma.presetItem.deleteMany();
  await prisma.filterPreset.deleteMany();
  await prisma.inventory.deleteMany();
  await prisma.image.deleteMany();
  await prisma.attribute.deleteMany();
  await prisma.alternativeName.deleteMany();
  await prisma.variant.deleteMany();
  await prisma.product.deleteMany();
  await prisma.category.deleteMany();
  await prisma.tag.deleteMany();
  await prisma.size.deleteMany();

  console.log('üëë –°–æ–∑–¥–∞–Ω–∏–µ "–±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞" –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
  await upsertSupportAgent({
    name: 'Shura Kargashin',
    email: 'shura.kargashin@example.com',
    telegramId: '6028909187',
    username: 'shura_kargashin',
    phone: '+77711745182',
    role: AgentRole.ADMIN,
  });
  await upsertSupportAgent({
    name: 'Intragentt',
    email: 'intragentt@example.com',
    username: 'intragentt',
    phone: '+77711078754',
    role: AgentRole.ADMIN,
  });
  await upsertSupportAgent({
    name: 'VokinivodoP',
    email: 'vokinivodop@example.com',
    username: 'vokinivodoP',
    phone: null,
    role: AgentRole.MANAGEMENT,
  });
  await upsertSupportAgent({
    name: 'Yana',
    email: 'yana.manager@example.com',
    username: 'yana_manager_tg',
    role: AgentRole.MANAGEMENT,
    telegramId: null,
    phone: null,
  });
  await upsertSupportAgent({
    name: 'Artem',
    email: 'artem.manager@example.com',
    username: 'artem_manager_tg',
    role: AgentRole.MANAGEMENT,
    telegramId: null,
    phone: null,
  });
  await upsertSupportAgent({
    name: 'Anna Support',
    email: 'anna.support@example.com',
    username: 'kyanchir_support_anna',
    role: AgentRole.SUPPORT,
    telegramId: null,
    phone: null,
  });

  console.log('üìß –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—á—Ç...');
  const emailsToSeed = [
    'uw@kyanchir.ru',
    'support@kyanchir.ru',
    'manager@kyanchir.ru',
    'admin@kyanchir.ru',
    'yana@kyanchir.ru',
    'artem@kyanchir.ru',
    'intragentt@kyanchir.ru',
    'promo@kyanchir.ru',
    'hello@kyanchir.ru',
  ];

  await prisma.supportRoute.createMany({
    data: emailsToSeed.map((email) => ({ kyanchirEmail: email })),
    skipDuplicates: true,
  });

  console.log('üìö –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–≥–∏)...');
  const [S, M, L, XL] = await Promise.all([
    upsertSize('S'),
    upsertSize('M'),
    upsertSize('L'),
    upsertSize('XL'),
  ]);
  const base = await upsertCategory('–ë–∞–∑–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è', { order: 1 });
  const sets = await upsertCategory('–ö–æ–º–ø–ª–µ–∫—Ç—ã', {
    parentId: base.id,
    order: 1,
  });
  const bras = await upsertCategory('–ë—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä—ã', {
    parentId: base.id,
    order: 2,
  });
  const panties = await upsertCategory('–¢—Ä—É—Å–∏–∫–∏', {
    parentId: base.id,
    order: 3,
  });
  const body = await upsertCategory('–ë–æ–¥–∏', { parentId: base.id, order: 4 });
  const home = await upsertCategory('–î–æ–º–∞—à–Ω—è—è –æ–¥–µ–∂–¥–∞', { order: 2 });
  const [newTag, topTag, saleTag, seamlessTag] = await Promise.all([
    upsertTag('–ù–æ–≤–∏–Ω–∫–∞', '#65D6AD', 1),
    upsertTag('–•–∏—Ç', '#A78BFA', 2),
    upsertTag('–°–∫–∏–¥–∫–∞', '#F87171', 3),
    upsertTag('–ë–µ—Å—à–æ–≤–Ω–æ–µ', '#9CA3AF', 4),
  ]);
  console.log('üçì –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
  await createProductWithRelations({
    sku: 'KY-SET-001',
    name: '–ö–æ–º–ø–ª–µ–∫—Ç ¬´Cloud Comfort¬ª',
    description:
      '–û—á–µ–Ω—å –º—è–≥–∫–∏–π –∏ —É–¥–æ–±–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –î—ã—à–∞—â–∞—è —Ç–∫–∞–Ω—å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞.',
    categoryNames: [sets.name, base.name],
    tagNames: [newTag.name, topTag.name],
    attributes: [
      { key: '–°–æ—Å—Ç–∞–≤', value: '–•–ª–æ–ø–æ–∫ 92%, –≠–ª–∞—Å—Ç–∞–Ω 8%' },
      { key: '–£—Ö–æ–¥', value: '–î–µ–ª–∏–∫–∞—Ç–Ω–∞—è —Å—Ç–∏—Ä–∫–∞ –ø—Ä–∏ 30¬∞C' },
    ],
    variants: [
      {
        color: '–ë–µ–ª—ã–π',
        price: 12444,
        oldPrice: 15000,
        isFeatured: true,
        images: ['/–§–æ—Ç–æ - 1.png', '/–§–æ—Ç–æ - 2.png', '/–§–æ—Ç–æ - 3.png'],
        stockBySize: { S: 3, M: 20, L: 15, XL: 0 },
      },
      {
        color: '–ß—ë—Ä–Ω—ã–π',
        price: 12990,
        oldPrice: 14990,
        images: ['/placeholder.png', '/placeholder.png', '/–§–æ—Ç–æ - 4.png'],
        stockBySize: { S: 5, M: 10, L: 8, XL: 2 },
      },
    ],
  });
  await createProductWithRelations({
    sku: 'KY-BRA-015',
    name: '–ë—Ä–∞ ¬´–®–µ–ª–∫–æ–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç¬ª',
    description:
      '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ–∂–Ω—ã–π –±—Ä–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —à–µ–ª–∫–∞ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è.',
    categoryNames: [bras.name],
    tagNames: [newTag.name, seamlessTag.name],
    attributes: [{ key: '–ú–∞—Ç–µ—Ä–∏–∞–ª', value: '100% –®–µ–ª–∫' }],
    variants: [
      {
        color: '–ü—É–¥—Ä–æ–≤—ã–π',
        price: 18990,
        oldPrice: 21000,
        images: ['/–§–æ—Ç–æ - 3.png', '/–§–æ—Ç–æ - 1.png'],
        stockBySize: { S: 10, M: 10, L: 5 },
      },
      {
        color: '–®–∞–º–ø–∞–Ω—å',
        price: 18990,
        images: ['/–§–æ—Ç–æ - 2.png', '/placeholder.png'],
        stockBySize: { S: 8, M: 12, L: 7 },
      },
    ],
  });
  await createProductWithRelations({
    sku: 'KY-PNT-008',
    name: '–¢—Ä—É—Å–∏–∫–∏-—Å–ª–∏–ø—ã ¬´Second Skin¬ª',
    description:
      '–ë–µ—Å—à–æ–≤–Ω—ã–µ —Ç—Ä—É—Å–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ –æ—â—É—â–∞—é—Ç—Å—è –Ω–∞ —Ç–µ–ª–µ. –ò–¥–µ–∞–ª—å–Ω—ã –ø–æ–¥ –æ–±–ª–µ–≥–∞—é—â—É—é –æ–¥–µ–∂–¥—É.',
    categoryNames: [panties.name, base.name],
    tagNames: [topTag.name, seamlessTag.name],
    attributes: [{ key: '–°–æ—Å—Ç–∞–≤', value: '–ú–∏–∫—Ä–æ—Ñ–∏–±—Ä–∞ 80%, –≠–ª–∞—Å—Ç–∞–Ω 20%' }],
    variants: [
      {
        color: '–¢–µ–ª–µ—Å–Ω—ã–π',
        price: 4990,
        images: ['/placeholder.png', '/–§–æ—Ç–æ - 4.png'],
        stockBySize: { S: 30, M: 50, L: 40 },
      },
      {
        color: '–ú–æ–∫–∫–æ',
        price: 4990,
        images: ['/placeholder.png', '/–§–æ—Ç–æ - 1.png'],
        stockBySize: { S: 25, M: 45, L: 35 },
      },
      {
        color: '–ß–µ—Ä–Ω—ã–π',
        price: 4990,
        images: ['/–§–æ—Ç–æ - 2.png', '/placeholder.png'],
        stockBySize: { S: 40, M: 60, L: 50 },
      },
    ],
  });
  await createProductWithRelations({
    sku: 'KY-BODY-003',
    name: '–ë–æ–¥–∏ ¬´–ü–æ–ª—É–Ω–æ—á–Ω—ã–π –±–∞—Ä—Ö–∞—Ç¬ª',
    description:
      '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –±–æ–¥–∏ —Å –∫—Ä—É–∂–µ–≤–Ω—ã–º–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏. –°–æ–∑–¥–∞–Ω–æ, —á—Ç–æ–±—ã –≤–æ—Å—Ö–∏—â–∞—Ç—å.',
    categoryNames: [body.name],
    tagNames: [saleTag.name],
    attributes: [{ key: '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å', value: '–ö—Ä—É–∂–µ–≤–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏' }],
    variants: [
      {
        color: '–ò–∑—É–º—Ä—É–¥–Ω—ã–π',
        price: 22500,
        oldPrice: 28000,
        images: ['/–§–æ—Ç–æ - 3.png', '/placeholder.png', '/–§–æ—Ç–æ - 1.png'],
        stockBySize: { S: 5, M: 8, L: 4 },
      },
      {
        color: '–ë–æ—Ä–¥–æ–≤—ã–π',
        price: 22500,
        oldPrice: 28000,
        images: ['/–§–æ—Ç–æ - 4.png', '/placeholder.png'],
        stockBySize: { S: 6, M: 7, L: 5 },
      },
    ],
  });
  console.log('üéõ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π...');
  const preset = await prisma.filterPreset.create({
    data: { name: '–ì–ª–∞–≤–Ω–∞—è –≤–∏—Ç—Ä–∏–Ω–∞', isDefault: true },
  });
  await prisma.presetItem.createMany({
    data: [
      {
        presetId: preset.id,
        type: PresetItemType.CATEGORY,
        categoryId: sets.id,
        order: 1,
      },
      {
        presetId: preset.id,
        type: PresetItemType.CATEGORY,
        categoryId: body.id,
        order: 2,
      },
      {
        presetId: preset.id,
        type: PresetItemType.TAG,
        tagId: newTag.id,
        order: 3,
      },
      {
        presetId: preset.id,
        type: PresetItemType.TAG,
        tagId: seamlessTag.id,
        order: 4,
      },
      {
        presetId: preset.id,
        type: PresetItemType.TAG,
        tagId: saleTag.id,
        order: 5,
      },
    ],
    skipDuplicates: true,
  });
  console.log('üå± –°–ò–î–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù');
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–¥–∏–Ω–≥–∞:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
