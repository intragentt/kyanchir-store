'use client';

import { useCallback } from 'react';

interface UseRetryOptions {
  /**
   * üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
   */
  retries?: number;
  /**
   * ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  delay?: number;
  /**
   * üìù –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ
   */
  onRetry?: (attempt: number, error: unknown) => void;
}

/**
 * üîÑ –•–£–ö –î–õ–Ø –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö ASYNC-–ó–ê–ü–†–û–°–û–í
 */
function useRetry(options: UseRetryOptions = {}) {
  const { retries = 2, delay = 500, onRetry } = options;

  const execute = useCallback(
    async <T>(fn: () => Promise<T>): Promise<T> => {
      let attempt = 0;
      let lastError: unknown = null;

      while (attempt <= retries) {
        try {
          console.log('üîÑ useRetry: –ø–æ–ø—ã—Ç–∫–∞', { attempt });
          const result = await fn();
          console.log('‚úÖ useRetry: —É—Å–ø–µ—Ö', { attempt });
          return result;
        } catch (error) {
          lastError = error;
          console.log('‚ùå useRetry: –æ—à–∏–±–∫–∞', { attempt, error });
          if ((error as { skipRetry?: boolean })?.skipRetry) {
            console.log('‚ö†Ô∏è useRetry: –ø–æ–≤—Ç–æ—Ä –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ —Ñ–ª–∞–≥—É skipRetry');
            break;
          }
          if (attempt === retries) {
            break;
          }

          onRetry?.(attempt + 1, error);
          attempt += 1;

          await new Promise((resolve) => setTimeout(resolve, delay));
        }
      }

      throw lastError ?? new Error('useRetry: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    },
    [delay, onRetry, retries],
  );

  return { execute };
}

export { useRetry };
export type { UseRetryOptions };
