'use client';

import { useEffect, useRef, useState } from 'react';

interface UseDebounceOptions {
  /**
   * ‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  maxWait?: number;
}

/**
 * üïí –î–ï–ë–û–£–ù–° –î–õ–Ø –ò–ù–ü–£–¢–û–í –ò –§–ò–õ–¨–¢–†–û–í
 */
function useDebounce<T>(value: T, delay = 300, options: UseDebounceOptions = {}) {
  const { maxWait } = options;
  const [debouncedValue, setDebouncedValue] = useState(value);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const maxWaitRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    console.log('üîÑ useDebounce: –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', { value, delay, maxWait });

    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    timeoutRef.current = setTimeout(() => {
      console.log('‚úÖ useDebounce: –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ', { value });
      setDebouncedValue(value);
    }, delay);

    if (maxWait && !maxWaitRef.current) {
      maxWaitRef.current = setTimeout(() => {
        console.log('‚ö†Ô∏è useDebounce: maxWait –¥–æ—Å—Ç–∏–≥–Ω—É—Ç', { value });
        setDebouncedValue(value);
        maxWaitRef.current && clearTimeout(maxWaitRef.current);
        maxWaitRef.current = null;
      }, maxWait);
    }

    return () => {
      timeoutRef.current && clearTimeout(timeoutRef.current);
      if (maxWaitRef.current) {
        clearTimeout(maxWaitRef.current);
        maxWaitRef.current = null;
      }
    };
  }, [value, delay, maxWait]);

  return debouncedValue;
}

export { useDebounce };
export type { UseDebounceOptions };
