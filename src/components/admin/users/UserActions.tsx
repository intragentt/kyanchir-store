// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/components/admin/users/UserActions.tsx

'use client';

import { useCallback, useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import { toast } from 'react-hot-toast';
import { LoadingButton } from '@/components/shared/ui';
import type { AdminUserRecord } from '@/lib/admin/users';
import { logEvent } from '@/lib/monitoring';

const ROLE_OPTIONS: { value: string; label: string }[] = [
  { value: 'ADMIN', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
  { value: 'MANAGEMENT', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
  { value: 'SUPPORT', label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
  { value: 'USER', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
];

interface UserActionsProps {
  /**
   * üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  user: AdminUserRecord;
  /**
   * üôÖ –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
   */
  isSelf: boolean;
  /**
   * üîÅ –ö–æ–ª–±—ç–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  onCompleted?: () => void;
}

/**
 * ‚öôÔ∏è –î–ï–ô–°–¢–í–ò–Ø –ù–ê–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
 *
 * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è.
 */
export default function UserActions({ user, isSelf, onCompleted }: UserActionsProps) {
  const [selectedRole, setSelectedRole] = useState(user.role);
  const [isUpdatingRole, setIsUpdatingRole] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    setSelectedRole(user.role);
  }, [user.role]);

  const roleOptions = useMemo(() => {
    if (ROLE_OPTIONS.some((option) => option.value === user.role)) {
      return ROLE_OPTIONS;
    }

    return [{ value: user.role, label: user.role }, ...ROLE_OPTIONS];
  }, [user.role]);

  const handleRoleChange = useCallback(async () => {
    console.log('üîÑ UserActions: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏', { id: user.id });

    if (selectedRole === user.role) {
      toast('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    setIsUpdatingRole(true);

    try {
      const response = await fetch(`/api/admin/users/${user.id}/role`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ role: selectedRole }),
      });

      if (!response.ok) {
        const errorPayload = await response.json().catch(() => ({}));
        throw new Error(errorPayload.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      toast.success('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      logEvent({
        type: 'admin.users.role-updated',
        timestamp: Date.now(),
        payload: { userId: user.id, role: selectedRole },
      });
      onCompleted?.();
    } catch (error) {
      console.error('‚ùå UserActions: –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', error);
      toast.error(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsUpdatingRole(false);
    }
  }, [onCompleted, selectedRole, user.id, user.role]);

  const handleDelete = useCallback(async () => {
    if (isSelf) {
      toast.error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
      return;
    }

    const shouldDelete = window.confirm(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´${user.fullName}¬ª? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`,
    );

    if (!shouldDelete) {
      return;
    }

    console.log('üîÑ UserActions: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { id: user.id });
    setIsDeleting(true);

    try {
      const response = await fetch(`/api/admin/users/${user.id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorPayload = await response.json().catch(() => ({}));
        throw new Error(errorPayload.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      toast.success('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω');
      logEvent({
        type: 'admin.users.deleted',
        timestamp: Date.now(),
        payload: { userId: user.id },
      });
      onCompleted?.();
    } catch (error) {
      console.error('‚ùå UserActions: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      toast.error(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsDeleting(false);
    }
  }, [isSelf, onCompleted, user.fullName, user.id]);

  return (
    <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
      <div className="flex flex-col gap-2 sm:flex-row sm:items-center">
        <label className="text-xs font-semibold uppercase tracking-wide text-gray-500">
          –†–æ–ª—å
          <select
            value={selectedRole}
            onChange={(event) => setSelectedRole(event.target.value)}
            className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
          >
            {roleOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </label>

        <LoadingButton
          type="button"
          isLoading={isUpdatingRole}
          onClick={handleRoleChange}
          className="bg-white text-gray-700 hover:bg-gray-100"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å
        </LoadingButton>
      </div>

      <div className="flex flex-col gap-2 sm:flex-row sm:items-center">
        <LoadingButton
          type="button"
          isLoading={isDeleting}
          onClick={handleDelete}
          className="bg-rose-600 text-white hover:bg-rose-500"
        >
          –£–¥–∞–ª–∏—Ç—å
        </LoadingButton>

        <Link
          href={user.email ? `mailto:${user.email}` : '#'}
          aria-disabled={!user.email}
          className="inline-flex items-center rounded-md border border-gray-300 px-3 py-2 text-sm font-medium text-gray-700 shadow-sm transition hover:bg-gray-50 aria-disabled:pointer-events-none aria-disabled:opacity-60"
        >
          –°–≤—è–∑–∞—Ç—å—Å—è
        </Link>
      </div>
    </div>
  );
}

export type { UserActionsProps };
