// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/components/admin/users/UserActions.tsx

'use client';

import { useCallback, useState } from 'react';
import Link from 'next/link';
import { toast } from 'react-hot-toast';
import { LoadingButton } from '@/components/shared/ui';
import type { AdminUserRecord } from '@/lib/admin/users';
import { logEvent } from '@/lib/monitoring';

interface UserActionsProps {
  /**
   * üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  user: AdminUserRecord;
  /**
   * üôÖ –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
   */
  isSelf: boolean;
  /**
   * üîÅ –ö–æ–ª–±—ç–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  onCompleted?: () => void;
}

/**
 * ‚öôÔ∏è –î–ï–ô–°–¢–í–ò–Ø –ù–ê–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
 *
 * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è.
 */
export default function UserActions({ user, isSelf, onCompleted }: UserActionsProps) {
  const [isBlocking, setIsBlocking] = useState(false);
  const [isUpdatingRole, setIsUpdatingRole] = useState(false);

  const simulateNetworkDelay = () => new Promise((resolve) => setTimeout(resolve, 600));

  const handleBlockToggle = useCallback(async () => {
    if (isSelf) {
      toast.error('–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
      return;
    }

    console.log('üîÑ UserActions: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { id: user.id });
    setIsBlocking(true);

    try {
      await simulateNetworkDelay();
      toast.success('–î–µ–π—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
      logEvent({
        type: 'admin.users.block-demo',
        timestamp: Date.now(),
        payload: { userId: user.id },
      });
      onCompleted?.();
    } catch (error) {
      console.error('‚ùå UserActions: –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsBlocking(false);
    }
  }, [isSelf, onCompleted, user.id]);

  const handleRoleChange = useCallback(async () => {
    console.log('üîÑ UserActions: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏', { id: user.id });
    setIsUpdatingRole(true);

    try {
      await simulateNetworkDelay();
      toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API');
      logEvent({
        type: 'admin.users.role-demo',
        timestamp: Date.now(),
        payload: { userId: user.id },
      });
      onCompleted?.();
    } catch (error) {
      console.error('‚ùå UserActions: –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsUpdatingRole(false);
    }
  }, [onCompleted, user.id]);

  return (
    <div className="flex flex-col gap-2 sm:flex-row sm:items-center">
      <LoadingButton
        type="button"
        isLoading={isBlocking}
        onClick={handleBlockToggle}
        className="bg-white text-gray-700 hover:bg-gray-100"
      >
        {user.status === 'blocked' ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
      </LoadingButton>

      <LoadingButton
        type="button"
        isLoading={isUpdatingRole}
        onClick={handleRoleChange}
        className="bg-white text-gray-700 hover:bg-gray-100"
      >
        –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
      </LoadingButton>

      <Link
        href={`mailto:${user.email ?? ''}`}
        className="inline-flex items-center rounded-md border border-gray-300 px-3 py-2 text-sm font-medium text-gray-700 shadow-sm transition hover:bg-gray-50"
      >
        –°–≤—è–∑–∞—Ç—å—Å—è
      </Link>
    </div>
  );
}

export type { UserActionsProps };
