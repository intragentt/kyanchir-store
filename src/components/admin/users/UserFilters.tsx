// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/components/admin/users/UserFilters.tsx

'use client';

import { memo } from 'react';
import { LoadingButton } from '@/components/shared/ui';
import type { AdminUserSortKey } from '@/lib/admin/users';

interface UserFiltersProps {
  /**
   * üîç –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
   */
  search: string;
  /**
   * ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
   */
  onSearchChange: (value: string) => void;
  /**
   * üéØ –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
   */
  role: string;
  onRoleChange: (value: string) => void;
  /**
   * üö¶ –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
   */
  status: string;
  onStatusChange: (value: string) => void;
  /**
   * üß≠ –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  sortBy: AdminUserSortKey;
  onSortByChange: (value: AdminUserSortKey) => void;
  /**
   * ‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  sortOrder: 'asc' | 'desc';
  onSortOrderToggle: () => void;
  /**
   * üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  perPage: number;
  onPerPageChange: (value: number) => void;
  /**
   * ‚è≥ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  isLoading: boolean;
  /**
   * ‚ôªÔ∏è –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  onReset: () => void;
}

const roleOptions = [
  { label: '–í—Å–µ —Ä–æ–ª–∏', value: 'all' },
  { label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', value: 'ADMIN' },
  { label: '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã', value: 'MANAGEMENT' },
  { label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', value: 'SUPPORT' },
  { label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value: 'USER' },
];

const statusOptions = [
  { label: '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã', value: 'all' },
  { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', value: 'active' },
  { label: '–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', value: 'pending' },
  { label: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', value: 'blocked' },
];

const sortOptions: { label: string; value: AdminUserSortKey }[] = [
  { label: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', value: 'createdAt' },
  { label: '–†–æ–ª—å', value: 'role' },
  { label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', value: 'ordersCount' },
  { label: '–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫', value: 'totalSpent' },
  { label: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥', value: 'lastLoginAt' },
];

const perPageOptions = [10, 20, 30, 50, 100];

/**
 * üîç –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 *
 * –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
 */
const UserFilters = memo(function UserFilters({
  search,
  onSearchChange,
  role,
  onRoleChange,
  status,
  onStatusChange,
  sortBy,
  onSortByChange,
  sortOrder,
  onSortOrderToggle,
  perPage,
  onPerPageChange,
  isLoading,
  onReset,
}: UserFiltersProps) {
  console.log('üîÑ UserFilters: —Ä–µ–Ω–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤');

  return (
    <div className="space-y-4">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <label className="flex flex-col gap-2 text-sm font-medium text-gray-700">
          –ü–æ–∏—Å–∫
          <input
            type="search"
            value={search}
            onChange={(event) => onSearchChange(event.target.value)}
            placeholder="–ò–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"
            className="w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
            autoComplete="off"
          />
        </label>

        <label className="flex flex-col gap-2 text-sm font-medium text-gray-700">
          –†–æ–ª—å
          <select
            value={role}
            onChange={(event) => onRoleChange(event.target.value)}
            className="w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
          >
            {roleOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </label>

        <label className="flex flex-col gap-2 text-sm font-medium text-gray-700">
          –°—Ç–∞—Ç—É—Å
          <select
            value={status}
            onChange={(event) => onStatusChange(event.target.value)}
            className="w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
          >
            {statusOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </label>

        <label className="flex flex-col gap-2 text-sm font-medium text-gray-700">
          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          <select
            value={perPage}
            onChange={(event) => onPerPageChange(Number.parseInt(event.target.value, 10))}
            className="w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
          >
            {perPageOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        </label>
      </div>

      <div className="flex flex-col gap-3 border-t border-gray-100 pt-4 md:flex-row md:items-center md:justify-between">
        <div className="flex flex-wrap items-center gap-3">
          <label className="flex items-center gap-2 text-sm text-gray-700">
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            <select
              value={sortBy}
              onChange={(event) => onSortByChange(event.target.value as AdminUserSortKey)}
              className="rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900"
            >
              {sortOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </label>

          <button
            type="button"
            onClick={onSortOrderToggle}
            className="inline-flex items-center rounded-md border border-gray-300 px-3 py-2 text-sm font-medium text-gray-700 shadow-sm transition hover:bg-gray-50"
          >
            {sortOrder === 'asc' ? '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' : '–ü–æ —É–±—ã–≤–∞–Ω–∏—é'}
          </button>
        </div>

        <LoadingButton
          type="button"
          isLoading={isLoading}
          onClick={onReset}
          className="self-start bg-white text-gray-700 hover:bg-gray-100"
        >
          –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        </LoadingButton>
      </div>
    </div>
  );
});

export default UserFilters;
export type { UserFiltersProps };
