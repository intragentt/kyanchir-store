'use client';

import { useCallback, useEffect, useMemo, useState, type FormEvent } from 'react';
import { toast } from 'react-hot-toast';
import { LoadingButton } from '@/components/shared/ui';
import type { SdekSettingsView } from '@/lib/settings/sdek';

interface ModeState {
  account: string;
  hasSecurePassword: boolean;
  securePassword: string;
  secretTouched: boolean;
}

interface FormState {
  mode: 'test' | 'production';
  defaultSenderName: string;
  defaultSenderPhone: string;
  defaultSenderCityCode: string;
  defaultSenderAddress: string;
  defaultTariffCode: string;
  defaultPackageWeightGrams: string;
  webhookSecret: string;
  test: ModeState;
  production: ModeState;
}

interface SdekSettingsFormProps {
  initialSettings: SdekSettingsView;
  initialUpdatedAt: string | null;
}

const toStringNumber = (value: number | null | undefined): string => {
  if (value === null || value === undefined) {
    return '';
  }

  return String(value);
};

const createModeState = (summary: SdekSettingsView['test']): ModeState => ({
  account: summary.account ?? '',
  hasSecurePassword: summary.hasSecurePassword,
  securePassword: '',
  secretTouched: false,
});

const createFormState = (settings: SdekSettingsView): FormState => ({
  mode: settings.mode,
  defaultSenderName: settings.defaultSenderName ?? '',
  defaultSenderPhone: settings.defaultSenderPhone ?? '',
  defaultSenderCityCode: toStringNumber(settings.defaultSenderCityCode),
  defaultSenderAddress: settings.defaultSenderAddress ?? '',
  defaultTariffCode: toStringNumber(settings.defaultTariffCode),
  defaultPackageWeightGrams: toStringNumber(settings.defaultPackageWeightGrams),
  webhookSecret: settings.webhookSecret ?? '',
  test: createModeState(settings.test),
  production: createModeState(settings.production),
});

const cloneView = (settings: SdekSettingsView): SdekSettingsView =>
  JSON.parse(JSON.stringify(settings)) as SdekSettingsView;

const parseNumberField = (value: string): number | null => {
  const trimmed = value.trim();
  if (!trimmed) {
    return null;
  }

  const parsed = Number.parseInt(trimmed, 10);
  return Number.isNaN(parsed) ? null : parsed;
};

const buildComparableSnapshot = (state: FormState): SdekSettingsView => ({
  mode: state.mode,
  test: {
    account: state.test.account.trim() || null,
    hasSecurePassword: state.test.secretTouched
      ? Boolean(state.test.securePassword)
      : state.test.hasSecurePassword,
  },
  production: {
    account: state.production.account.trim() || null,
    hasSecurePassword: state.production.secretTouched
      ? Boolean(state.production.securePassword)
      : state.production.hasSecurePassword,
  },
  defaultSenderName: state.defaultSenderName.trim() || null,
  defaultSenderPhone: state.defaultSenderPhone.trim() || null,
  defaultSenderCityCode: parseNumberField(state.defaultSenderCityCode),
  defaultSenderAddress: state.defaultSenderAddress.trim() || null,
  defaultTariffCode: parseNumberField(state.defaultTariffCode),
  defaultPackageWeightGrams: parseNumberField(state.defaultPackageWeightGrams),
  webhookSecret: state.webhookSecret.trim() || null,
});

const formatUpdatedAt = (iso: string | null): string => {
  if (!iso) {
    return '–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å';
  }

  try {
    const date = new Date(iso);
    return new Intl.DateTimeFormat('ru-RU', {
      dateStyle: 'medium',
      timeStyle: 'short',
    }).format(date);
  } catch (error) {
    console.warn('[SdekSettingsForm] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', error);
    return '‚Äî';
  }
};

const generateSecret = (): string => {
  if (typeof crypto !== 'undefined' && 'getRandomValues' in crypto) {
    const bytes = new Uint8Array(16);
    crypto.getRandomValues(bytes);
    return Array.from(bytes)
      .map((byte) => byte.toString(16).padStart(2, '0'))
      .join('');
  }

  return Math.random().toString(36).slice(2, 18) + Math.random().toString(36).slice(2, 18);
};

export default function SdekSettingsForm({ initialSettings, initialUpdatedAt }: SdekSettingsFormProps) {
  const [formState, setFormState] = useState<FormState>(() => createFormState(initialSettings));
  const [baseline, setBaseline] = useState<SdekSettingsView>(() => cloneView(initialSettings));
  const [lastSavedAt, setLastSavedAt] = useState<string | null>(initialUpdatedAt);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    setFormState(createFormState(initialSettings));
    setBaseline(cloneView(initialSettings));
    setLastSavedAt(initialUpdatedAt);
  }, [initialSettings, initialUpdatedAt]);

  const isDirty = useMemo(() => {
    return JSON.stringify(buildComparableSnapshot(formState)) !== JSON.stringify(baseline);
  }, [formState, baseline]);

  const handleModeChange = useCallback((mode: 'test' | 'production') => {
    setFormState((prev) => ({
      ...prev,
      mode,
    }));
  }, []);

  const handleFieldChange = useCallback((key: keyof Omit<FormState, 'test' | 'production'>, value: string) => {
    setFormState((prev) => ({
      ...prev,
      [key]: value,
    }));
  }, []);

  const handleCredentialsChange = useCallback(
    (mode: 'test' | 'production', key: 'account' | 'securePassword', value: string) => {
      setFormState((prev) => ({
        ...prev,
        [mode]: {
          ...prev[mode],
          [key]: value,
          ...(key === 'securePassword'
            ? { secretTouched: true, hasSecurePassword: Boolean(value) }
            : {}),
        },
      }));
    },
    [],
  );

  const handleSecretReset = useCallback((mode: 'test' | 'production') => {
    setFormState((prev) => ({
      ...prev,
      [mode]: {
        ...prev[mode],
        securePassword: '',
        secretTouched: true,
        hasSecurePassword: false,
      },
    }));
  }, []);

  const handleGenerateWebhookSecret = useCallback(() => {
    setFormState((prev) => ({
      ...prev,
      webhookSecret: generateSecret(),
    }));
  }, []);

  const handleSubmit = useCallback(
    async (event: FormEvent<HTMLFormElement>) => {
      event.preventDefault();

      if (!isDirty) {
        toast.error('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
      }

      setIsSaving(true);
      const toastId = toast.loading('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–î–≠–ö‚Ä¶');

      try {
        const payload = {
          mode: formState.mode,
          defaultSenderName: formState.defaultSenderName.trim(),
          defaultSenderPhone: formState.defaultSenderPhone.trim(),
          defaultSenderCityCode: formState.defaultSenderCityCode.trim(),
          defaultSenderAddress: formState.defaultSenderAddress.trim(),
          defaultTariffCode: formState.defaultTariffCode.trim(),
          defaultPackageWeightGrams: formState.defaultPackageWeightGrams.trim(),
          webhookSecret: formState.webhookSecret.trim(),
          test: {
            account: formState.test.account.trim(),
            ...(formState.test.secretTouched ? { securePassword: formState.test.securePassword } : {}),
          },
          production: {
            account: formState.production.account.trim(),
            ...(formState.production.secretTouched
              ? { securePassword: formState.production.securePassword }
              : {}),
          },
        };

        const response = await fetch('/api/admin/settings/sdek', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–î–≠–ö');
        }

        const nextSettings = data?.data as SdekSettingsView;
        const nextUpdatedAt = data?.updatedAt as string | null;

        setFormState(createFormState(nextSettings));
        setBaseline(cloneView(nextSettings));
        setLastSavedAt(nextUpdatedAt);

        toast.success(data?.message ?? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–î–≠–ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', { id: toastId });
      } catch (error) {
        toast.error(
          error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–î–≠–ö',
          { id: toastId },
        );
      } finally {
        setIsSaving(false);
      }
    },
    [formState, isDirty],
  );

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
        <div className="flex flex-col gap-4 lg:flex-row lg:items-start lg:justify-between">
          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-gray-900">üöö –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –°–î–≠–ö</h2>
            <p className="max-w-3xl text-sm text-gray-600">
              –£–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∏ –±–æ–µ–≤–æ–π —Å—Ä–µ–¥, –∞ —Ç–∞–∫–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
              –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ System Settings –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
            </p>
            <p className="text-xs text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatUpdatedAt(lastSavedAt)}</p>
          </div>
          <div className="flex flex-col gap-2 rounded-md border border-blue-200 bg-blue-50 p-4 text-xs text-blue-900">
            <strong className="text-sm font-semibold">–ü–∞–º—è—Ç–∫–∞</strong>
            <span>‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: https://api-docs.cdek.ru/29923859.html</span>
            <span>‚Ä¢ –ë–æ–µ–≤—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–¥–∞—é—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –°–î–≠–ö</span>
            <span>‚Ä¢ –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ –≤–µ–±—Ö—É–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –°–î–≠–ö –Ω–æ–≤—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º</span>
          </div>
        </div>
      </div>

      <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h3>
        <p className="mt-1 text-sm text-gray-600">
          –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—É, –≤ –±–æ–µ–≤–æ–º ‚Äî –Ω–∞ production API. –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –º–æ–∂–Ω–æ –≤
          –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
        </p>
        <div className="mt-4 flex flex-wrap gap-3">
          {(
            [
              { value: 'test', label: '–¢–µ—Å—Ç–æ–≤—ã–π' },
              { value: 'production', label: '–ë–æ–µ–≤–æ–π' },
            ] as const
          ).map((option) => (
            <button
              key={option.value}
              type="button"
              onClick={() => handleModeChange(option.value)}
              className={`rounded-md border px-4 py-2 text-sm font-medium transition focus:outline-none focus:ring-2 focus:ring-indigo-500/50 ${
                formState.mode === option.value
                  ? 'border-indigo-500 bg-indigo-50 text-indigo-700'
                  : 'border-gray-200 bg-gray-50 text-gray-600 hover:border-gray-300 hover:bg-white'
              }`}
            >
              {option.label}
            </button>
          ))}
        </div>
      </div>

      <div className="grid gap-6 lg:grid-cols-2">
        {(
          [
            { key: 'test', title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞' },
            { key: 'production', title: '–ë–æ–µ–≤–∞—è —Å—Ä–µ–¥–∞' },
          ] as const
        ).map((mode) => {
          const state = formState[mode.key];
          return (
            <div key={mode.key} className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-gray-900">{mode.title}</h3>
              <p className="mt-1 text-sm text-gray-600">
                –£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω (account) –∏ —Å–µ–∫—Ä–µ—Ç (secure_password) –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –°–î–≠–ö.
              </p>
              <div className="mt-4 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700" htmlFor={`${mode.key}-account`}>
                    Account
                  </label>
                  <input
                    id={`${mode.key}-account`}
                    value={state.account}
                    onChange={(event) => handleCredentialsChange(mode.key, 'account', event.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 12345"
                    className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                  />
                </div>
                <div>
                  <div className="flex items-center justify-between">
                    <label className="block text-sm font-medium text-gray-700" htmlFor={`${mode.key}-secret`}>
                      Secure password
                    </label>
                    {state.hasSecurePassword && !state.secretTouched ? (
                      <button
                        type="button"
                        onClick={() => handleSecretReset(mode.key)}
                        className="text-xs font-medium text-red-600 hover:text-red-500"
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
                      </button>
                    ) : null}
                  </div>
                  <input
                    id={`${mode.key}-secret`}
                    type="password"
                    value={state.secretTouched ? state.securePassword : ''}
                    onChange={(event) => handleCredentialsChange(mode.key, 'securePassword', event.target.value)}
                    placeholder={state.hasSecurePassword && !state.secretTouched ? '–°–µ–∫—Ä–µ—Ç —Å–∫—Ä—ã—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π' : '–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç...'}
                    className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                  />
                  {state.hasSecurePassword && !state.secretTouched ? (
                    <p className="mt-1 text-xs text-gray-500">–°–µ–∫—Ä–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ.</p>
                  ) : null}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
        <div className="grid gap-4 md:grid-cols-2">
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="sender-name">
              –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            </label>
            <input
              id="sender-name"
              value={formState.defaultSenderName}
              onChange={(event) => handleFieldChange('defaultSenderName', event.target.value)}
              placeholder="–ò–ü –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="sender-phone">
              –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            </label>
            <input
              id="sender-phone"
              value={formState.defaultSenderPhone}
              onChange={(event) => handleFieldChange('defaultSenderPhone', event.target.value)}
              placeholder="+7 (999) 123-45-67"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="sender-city">
              –ö–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (CityCode)
            </label>
            <input
              id="sender-city"
              value={formState.defaultSenderCityCode}
              onChange={(event) => handleFieldChange('defaultSenderCityCode', event.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 270"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="sender-address">
              –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            </label>
            <input
              id="sender-address"
              value={formState.defaultSenderAddress}
              onChange={(event) => handleFieldChange('defaultSenderAddress', event.target.value)}
              placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="tariff-code">
              –¢–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (TariffCode)
            </label>
            <input
              id="tariff-code"
              value={formState.defaultTariffCode}
              onChange={(event) => handleFieldChange('defaultTariffCode', event.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 136"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="package-weight">
              –í–µ—Å –ø–æ—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≥—Ä–∞–º–º—ã)
            </label>
            <input
              id="package-weight"
              value={formState.defaultPackageWeightGrams}
              onChange={(event) => handleFieldChange('defaultPackageWeightGrams', event.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 500"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700" htmlFor="webhook-secret">
            Webhook secret
          </label>
          <div className="mt-1 flex flex-col gap-3 sm:flex-row">
            <input
              id="webhook-secret"
              value={formState.webhookSecret}
              onChange={(event) => handleFieldChange('webhookSecret', event.target.value)}
              placeholder="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –°–î–≠–ö"
              className="flex-1 rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
            />
            <button
              type="button"
              onClick={handleGenerateWebhookSecret}
              className="inline-flex items-center justify-center rounded-md border border-gray-200 px-3 py-2 text-sm font-medium text-gray-700 transition hover:border-gray-300 hover:bg-gray-50"
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
        </div>
      </div>

      <div className="flex items-center justify-end gap-3">
        <p className="text-xs text-gray-500">
          –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥—É—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
        </p>
        <LoadingButton type="submit" isLoading={isSaving} disabled={!isDirty || isSaving}>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </LoadingButton>
      </div>
    </form>
  );
}
