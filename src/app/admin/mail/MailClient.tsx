// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/app/admin/mail/MailClient.tsx
'use client';

import { useState } from 'react';
import { SupportTicket } from '@prisma/client';

const SourceIcon = ({ source }: { source: SupportTicket['source'] | null }) => {
  let icon = 'üìß';
  let tooltip = '–ü—Ä–∏—à–ª–æ —Å –ø–æ—á—Ç—ã';
  if (source === 'WEB_FORM') {
    icon = 'üåê';
    tooltip = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ';
  } else if (source === 'TELEGRAM_BOT') {
    icon = 'ü§ñ';
    tooltip = '–û–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ Telegram –±–æ—Ç–∞';
  }
  return (
    <span title={tooltip} className="mr-2 text-lg">
      {icon}
    </span>
  );
};

const formatDate = (dateString: Date) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', { day: '2-digit', month: 'short' });
};

export default function MailClient({
  initialTickets,
  initialError,
}: {
  initialTickets: SupportTicket[];
  initialError: string | null;
}) {
  const [tickets, setTickets] = useState(initialTickets);
  const [error, setError] = useState(initialError);
  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(
    initialTickets[0] || null,
  );

  const availableEmails = [
    'support@kyanchir.ru',
    'yana@kyanchir.ru',
    'artem@kyanchir.ru',
    'promo@kyanchir.ru',
    'hello@kyanchir.ru',
  ];

  const openTicketsCount = tickets.filter((t) => t.status === 'OPEN').length;

  return (
    <div className="flex h-[calc(100vh-4rem)] overflow-hidden rounded-lg bg-white shadow-md">
      <aside className="w-1/5 border-r bg-gray-50 p-4">
        <h2 className="mb-4 text-xl font-bold">–ü–∞–ø–∫–∏</h2>
        <nav>
          <ul>
            <li className="mb-2">
              <a href="#" className="font-semibold text-blue-600">
                –í—Ö–æ–¥—è—â–∏–µ ({openTicketsCount})
              </a>
            </li>
            <li className="mb-2">
              <a href="#" className="text-gray-700 hover:text-blue-600">
                –í —Ä–∞–±–æ—Ç–µ (0)
              </a>
            </li>
            <li className="mb-2">
              <a href="#" className="text-gray-700 hover:text-blue-600">
                –ó–∞–∫—Ä—ã—Ç—ã–µ (0)
              </a>
            </li>
          </ul>
        </nav>
      </aside>
      <section className="w-1/3 overflow-y-auto border-r">
        <div className="border-b p-4">
          <input
            type="search"
            placeholder="–ü–æ–∏—Å–∫ –≤ –ø–æ—á—Ç–µ..."
            className="w-full rounded border p-2"
          />
        </div>
        {error && (
          <div className="bg-red-50 p-4 text-center text-red-600">
            <b>–û—à–∏–±–∫–∞:</b>
            <p>{error}</p>
          </div>
        )}
        {tickets.length === 0 && !error && (
          <p className="p-4 text-center text-gray-500">–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.</p>
        )}
        <ul>
          {tickets.map((ticket) => (
            <li
              key={ticket.id}
              onClick={() => setSelectedTicket(ticket)}
              className={`cursor-pointer border-b p-4 hover:bg-gray-50 ${selectedTicket?.id === ticket.id ? 'bg-blue-100' : ''}`}
            >
              <div className="mb-1 flex items-center justify-between">
                <span className="truncate font-bold text-gray-800">
                  {ticket.clientEmail}
                </span>
                <span className="flex-shrink-0 text-xs text-gray-500">
                  {formatDate(ticket.createdAt)}
                </span>
              </div>
              <p className="flex items-center truncate text-sm text-gray-700">
                <SourceIcon source={ticket.source} />
                {ticket.subject}
              </p>
            </li>
          ))}
        </ul>
      </section>
      <main className="flex w-full flex-col overflow-y-auto p-4">
        {selectedTicket ? (
          <>
            <div className="mb-4 border-b pb-4">
              <h1 className="mb-1 flex items-center text-2xl font-bold">
                <SourceIcon source={selectedTicket.source} />
                {selectedTicket.subject}
              </h1>
              <p className="text-sm text-gray-600">
                –û—Ç:{' '}
                <span className="font-semibold">
                  {selectedTicket.clientEmail}
                </span>
              </p>
              <p className="text-sm text-gray-600">
                –ù–∞ email:{' '}
                <span className="font-semibold">
                  {selectedTicket.assignedEmail || '-'}
                </span>
              </p>
            </div>
            <div className="prose mb-4 flex-grow">
              <p>
                –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É
                —Ç–∏–∫–µ—Ç—É...
              </p>
            </div>
            <div className="mt-auto border-t pt-4">
              <textarea
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                rows={5}
                className="mb-2 w-full rounded border p-2"
              ></textarea>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <label htmlFor="from-email" className="text-sm text-gray-600">
                    –û—Ç–≤–µ—Ç–∏—Ç—å —Å:
                  </label>
                  <select
                    id="from-email"
                    className="rounded border p-2 text-sm"
                  >
                    {availableEmails.map((email) => (
                      <option key={email} value={email}>
                        {email}
                      </option>
                    ))}
                  </select>
                </div>
                <button className="rounded bg-blue-600 px-6 py-2 font-bold text-white hover:bg-blue-700">
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex h-full items-center justify-center text-gray-500">
            <p>{error ? '' : '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞'}</p>
          </div>
        )}
      </main>
    </div>
  );
}
