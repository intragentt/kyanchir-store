// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/app/admin/mail/page.tsx
'use client';

import { useState } from 'react';

// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

// –¢–∏–ø—ã –¥–ª—è –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–∏–ª–∏ source)
type TicketSource = 'EMAIL' | 'WEB_FORM' | 'TELEGRAM_BOT';
type MockTicket = {
  id: string;
  from: string;
  subject: string;
  snippet: string;
  timestamp: string;
  status: 'OPEN' | 'PENDING' | 'RESOLVED';
  source: TicketSource; // <--- –ù–û–í–û–ï –ü–û–õ–ï
};

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
const mockTickets: MockTicket[] = [
  {
    id: '1',
    from: 'elena.v@example.com',
    subject: '–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É #1234',
    snippet: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É...',
    timestamp: '14:28',
    status: 'OPEN',
    source: 'EMAIL',
  },
  {
    id: '2',
    from: 'ivan.p@example.com',
    subject: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π',
    snippet: '–ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ –∫–∞—Ä—Ç–µ...',
    timestamp: '12:05',
    status: 'PENDING',
    source: 'WEB_FORM',
  },
  {
    id: '3',
    from: 'olga.s@example.com',
    subject: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ',
    snippet: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –±—Ä–µ–Ω–¥...',
    timestamp: '–í—á–µ—Ä–∞',
    status: 'OPEN',
    source: 'EMAIL',
  },
  {
    id: '4',
    from: 'Telegram User',
    subject: '–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥',
    snippet: '–ù–∞–ø–∏—Å–∞–ª –≤ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...',
    timestamp: '–í—á–µ—Ä–∞',
    status: 'OPEN',
    source: 'TELEGRAM_BOT',
  },
  {
    id: '5',
    from: 'petr.k@example.com',
    subject: '–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞',
    snippet: '–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–æ—à–µ–ª...',
    timestamp: '29 –∞–≤–≥',
    status: 'RESOLVED',
    source: 'WEB_FORM',
  },
];

const availableEmails = [
  'support@kyanchir.ru',
  'yana@kyanchir.ru',
  'artem@kyanchir.ru',
  'promo@kyanchir.ru',
  'hello@kyanchir.ru',
];

// –ù–µ–±–æ–ª—å—à–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
const SourceIcon = ({ source }: { source: TicketSource }) => {
  let icon = 'üìß'; // Email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let tooltip = '–ü—Ä–∏—à–ª–æ —Å –ø–æ—á—Ç—ã';
  if (source === 'WEB_FORM') {
    icon = 'üåê';
    tooltip = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ';
  } else if (source === 'TELEGRAM_BOT') {
    icon = 'ü§ñ';
    tooltip = '–û–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ Telegram –±–æ—Ç–∞';
  }
  return (
    <span title={tooltip} className="mr-2">
      {icon}
    </span>
  );
};
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

export default function AdminMailPage() {
  const [selectedTicket, setSelectedTicket] = useState<MockTicket | null>(
    mockTickets[0],
  );

  return (
    <div className="flex h-[calc(100vh-4rem)] overflow-hidden rounded-lg bg-white shadow-md">
      {/* --- –ö–û–õ–û–ù–ö–ê 1: –ü–ê–ü–ö–ò --- */}
      <aside className="w-1/5 border-r bg-gray-50 p-4">
        <h2 className="mb-4 text-xl font-bold">–ü–∞–ø–∫–∏</h2>
        <nav>
          <ul>
            <li className="mb-2">
              <a href="#" className="font-semibold text-blue-600">
                –í—Ö–æ–¥—è—â–∏–µ (
                {mockTickets.filter((t) => t.status === 'OPEN').length})
              </a>
            </li>
            <li className="mb-2">
              <a href="#" className="text-gray-700 hover:text-blue-600">
                –í —Ä–∞–±–æ—Ç–µ (
                {mockTickets.filter((t) => t.status === 'PENDING').length})
              </a>
            </li>
            <li className="mb-2">
              <a href="#" className="text-gray-700 hover:text-blue-600">
                –ó–∞–∫—Ä—ã—Ç—ã–µ (
                {mockTickets.filter((t) => t.status === 'RESOLVED').length})
              </a>
            </li>
          </ul>
        </nav>
      </aside>

      {/* --- –ö–û–õ–û–ù–ö–ê 2: –°–ü–ò–°–û–ö –¢–ò–ö–ï–¢–û–í --- */}
      <section className="w-1/3 overflow-y-auto border-r">
        <div className="border-b p-4">
          <input
            type="search"
            placeholder="–ü–æ–∏—Å–∫ –≤ –ø–æ—á—Ç–µ..."
            className="w-full rounded border p-2"
          />
        </div>
        <ul>
          {mockTickets.map((ticket) => (
            <li
              key={ticket.id}
              onClick={() => setSelectedTicket(ticket)}
              className={`cursor-pointer border-b p-4 hover:bg-gray-50 ${selectedTicket?.id === ticket.id ? 'bg-blue-100' : ''}`}
            >
              <div className="mb-1 flex items-center justify-between">
                <span className="truncate font-bold text-gray-800">
                  {ticket.from}
                </span>
                <span className="flex-shrink-0 text-xs text-gray-500">
                  {ticket.timestamp}
                </span>
              </div>
              {/* --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ö–û–ù–ö–£ --- */}
              <p className="flex items-center truncate text-sm text-gray-700">
                <SourceIcon source={ticket.source} />
                {ticket.subject}
              </p>
              {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
              <p className="mt-1 truncate text-xs text-gray-500">
                {ticket.snippet}
              </p>
            </li>
          ))}
        </ul>
      </section>

      {/* --- –ö–û–õ–û–ù–ö–ê 3: –ü–†–û–°–ú–û–¢–† –ò –û–¢–í–ï–¢ --- */}
      <main className="flex w-full flex-col overflow-y-auto p-4">
        {selectedTicket ? (
          <>
            <div className="mb-4 border-b pb-4">
              {/* --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ö–û–ù–ö–£ –í –ó–ê–ì–û–õ–û–í–û–ö --- */}
              <h1 className="mb-1 flex items-center text-2xl font-bold">
                <SourceIcon source={selectedTicket.source} />
                {selectedTicket.subject}
              </h1>
              {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
              <p className="text-sm text-gray-600">
                –û—Ç: <span className="font-semibold">{selectedTicket.from}</span>
              </p>
            </div>

            <div className="prose mb-4 flex-grow">
              <p>–¢–µ–ª–æ –ø–∏—Å—å–º–∞ –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å...</p>
              <br />
              <p>{selectedTicket.snippet}</p>
            </div>

            <div className="mt-auto border-t pt-4">
              <textarea
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                rows={5}
                className="mb-2 w-full rounded border p-2"
              ></textarea>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <label htmlFor="from-email" className="text-sm text-gray-600">
                    –û—Ç–≤–µ—Ç–∏—Ç—å —Å:
                  </label>
                  <select
                    id="from-email"
                    className="rounded border p-2 text-sm"
                  >
                    {availableEmails.map((email) => (
                      <option key={email} value={email}>
                        {email}
                      </option>
                    ))}
                  </select>
                </div>
                <button className="rounded bg-blue-600 px-6 py-2 font-bold text-white hover:bg-blue-700">
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex h-full items-center justify-center text-gray-500">
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞</p>
          </div>
        )}
      </main>
    </div>
  );
}
