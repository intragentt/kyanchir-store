'use client';

import { useCallback, useEffect, useRef, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { ClearIcon, EyeIcon, EyeOffIcon, Logo, TelegramOfficialIcon } from '@/components/shared/icons';
import { LoadingButton, ToastViewport } from '@/components/shared/ui';

export default function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(true);

  // --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–∞–∫ –±—ã–ª–æ ---
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [emailError, setEmailError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState<string | null>(null);
  const [isEmailTouched, setIsEmailTouched] = useState(false);
  const [isPasswordTouched, setIsPasswordTouched] = useState(false);
  const router = useRouter();
  const searchParams = useSearchParams();
  const emailInputRef = useRef<HTMLInputElement | null>(null);
  const passwordInputRef = useRef<HTMLInputElement | null>(null);

  const validateEmail = (value: string) => {
    const isValid = /\S+@\S+\.\S+/.test(value);
    console.log('üîÑ LoginPage: –ø—Ä–æ–≤–µ—Ä–∫–∞ email', { value, isValid });
    return isValid;
  };

  const validatePassword = (value: string) => {
    const isValid = value.length >= 8;
    console.log('üîÑ LoginPage: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è', { length: value.length, isValid });
    return isValid;
  };

  useEffect(() => {
    emailInputRef.current?.focus();
  }, []);

  useEffect(() => {
    const rememberedEmail = localStorage.getItem('rememberedEmail');
    if (rememberedEmail) {
      setEmail(rememberedEmail);
      setRememberMe(true);
    }
  }, []);

  useEffect(() => {
    if (searchParams.get('status') === 'registered') {
      setSuccessMessage('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.');
    }
  }, [searchParams]);

  useEffect(() => {
    if (isEmailTouched) {
      setEmailError(
        validateEmail(email) ? null : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.',
      );
    }
  }, [email, isEmailTouched]);

  useEffect(() => {
    if (isPasswordTouched) {
      setPasswordError(
        validatePassword(password)
          ? null
          : '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.',
      );
    }
  }, [password, isPasswordTouched]);

  // --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å –æ–¥–Ω–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ---
  const handleLoginSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    let hasClientError = false;
    if (!validateEmail(email)) {
      setEmailError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.');
      setIsEmailTouched(true);
      hasClientError = true;
      emailInputRef.current?.focus();
    }

    if (!validatePassword(password)) {
      setPasswordError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.');
      setIsPasswordTouched(true);
      if (!hasClientError) {
        passwordInputRef.current?.focus();
      }
      hasClientError = true;
    }

    if (hasClientError) {
      console.log('‚ùå LoginPage: –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
      setIsLoading(false);
      return;
    }

    if (rememberMe) {
      localStorage.setItem('rememberedEmail', email);
    } else {
      localStorage.removeItem('rememberedEmail');
    }

    try {
      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É email + –ø–∞—Ä–æ–ª—å. –≠—Ç–æ—Ç —à–∞–≥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
      const validateRes = await fetch('/api/auth/validate-credentials', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!validateRes.ok) {
        const data = await validateRes.json();
        throw new Error(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }

      // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥.
      // –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô API-–º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Å—Å–∏–∏.
      const sendCodeRes = await fetch('/api/auth/send-login-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email }),
      });

      if (!sendCodeRes.ok) {
        const data = await sendCodeRes.json();
        throw new Error(
          data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
        );
      }

      // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞.
      router.push(`/login/verify-code?email=${encodeURIComponent(email)}`);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.',
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleTelegramRedirect = useCallback(() => {
    const botUsername =
      process.env.NEXT_PUBLIC_TELEGRAM_BOT_USERNAME || 'kyanchir_store_bot';
    const deepLink = `https://t.me/${botUsername}`;
    const popup = window.open(deepLink, '_blank', 'noopener,noreferrer');
    if (!popup) {
      window.location.href = deepLink;
    }
  }, []);

  return (
    <div className="flex min-h-screen items-start justify-center bg-zinc-50 px-4 pt-20 sm:pt-24">
      <ToastViewport />
      <div className="w-full max-w-sm">
        <div className="space-y-5 rounded-lg border border-zinc-200 bg-white p-8 text-center shadow-sm">
          <Link
            href="/"
            className="mx-auto flex h-12 w-auto justify-center text-[#6B80C5] transition-transform hover:scale-105"
          >
            <div className="mt-2 scale-125 transform">
              <Logo />
            </div>
          </Link>
          {successMessage && (
            <p className="pt-2 text-center text-sm text-green-600">
              {successMessage}
            </p>
          )}
          <form
            className="space-y-4 text-left font-body"
            onSubmit={handleLoginSubmit}
            noValidate
          >
            <div className="relative">
              <input
                ref={emailInputRef}
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => {
                  setIsEmailTouched(true);
                  setEmail(e.target.value);
                }}
                onBlur={() => setIsEmailTouched(true)}
                className="block w-full rounded-md border-zinc-300 bg-zinc-50 px-3 py-2 pr-10 text-base placeholder-zinc-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
                placeholder="Email"
                aria-invalid={Boolean(emailError)}
                aria-describedby={emailError ? 'email-error' : undefined}
              />
              {email && (
                <button
                  type="button"
                  onClick={() => setEmail('')}
                  className="absolute inset-y-0 right-0 flex items-center pr-3"
                  aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ Email"
                >
                  <ClearIcon className="h-5 w-5 text-zinc-400 hover:text-zinc-600" />
                </button>
              )}
              {emailError && (
                <p
                  id="email-error"
                  className="mt-1 text-xs text-red-600"
                  role="alert"
                >
                  {emailError}
                </p>
              )}
            </div>

            <div className="relative">
              <input
                ref={passwordInputRef}
                id="password"
                name="password"
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={(e) => {
                  setIsPasswordTouched(true);
                  setPassword(e.target.value);
                }}
                onBlur={() => setIsPasswordTouched(true)}
                className="block w-full rounded-md border-zinc-300 bg-zinc-50 px-3 py-2 pr-16 text-base placeholder-zinc-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"
                placeholder="–ü–∞—Ä–æ–ª—å"
                aria-invalid={Boolean(passwordError)}
                aria-describedby={passwordError ? 'password-error' : undefined}
              />
              <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                {password && (
                  <>
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="mr-2"
                      aria-label={
                        showPassword ? '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'
                      }
                    >
                      {showPassword ? (
                        <EyeOffIcon className="h-5 w-5 text-zinc-400 hover:text-zinc-600" />
                      ) : (
                        <EyeIcon className="h-5 w-5 text-zinc-400 hover:text-zinc-600" />
                      )}
                    </button>
                    <button
                      type="button"
                      onClick={() => setPassword('')}
                      aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –ü–∞—Ä–æ–ª—å"
                    >
                      <ClearIcon className="h-5 w-5 text-zinc-400 hover:text-zinc-600" />
                    </button>
                  </>
                )}
              </div>
              {passwordError && (
                <p
                  id="password-error"
                  className="mt-1 text-xs text-red-600"
                  role="alert"
                >
                  {passwordError}
                </p>
              )}
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="h-4 w-4 rounded border-zinc-300 text-indigo-600 focus:ring-indigo-500"
                />
                <label
                  htmlFor="remember-me"
                  className="ml-2 block text-sm text-zinc-700"
                >
                  –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
                </label>
              </div>
            </div>
            <LoadingButton
              type="submit"
              isLoading={isLoading}
              className="w-full rounded-md bg-[#6B80C5] px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-opacity-90 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:opacity-50"
              spinnerSrText="–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            >
              –í–æ–π—Ç–∏
            </LoadingButton>
            {error && (
              <p className="pt-2 text-center text-xs text-red-600">{error}</p>
            )}
          </form>
          <div className="text-center font-body">
            <Link
              href={
                email
                  ? `/forgot-password?email=${encodeURIComponent(email)}`
                  : '/forgot-password'
              }
              className="text-sm font-semibold text-[#6B80C5] hover:text-opacity-80"
            >
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
            </Link>
          </div>
          <div className="flex items-center gap-x-3">
            <div className="h-px w-full bg-zinc-200" />
            <div className="font-body text-sm font-medium text-zinc-400">
              –ò–õ–ò
            </div>
            <div className="h-px w-full bg-zinc-200" />
          </div>
          <button
            onClick={handleTelegramRedirect}
            className="flex w-full items-center justify-center gap-x-2 rounded-md border border-zinc-300 bg-white px-4 py-2 font-body text-sm font-semibold text-zinc-700 shadow-sm transition hover:bg-zinc-50"
          >
            <TelegramOfficialIcon className="h-6 w-6" />
            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º
          </button>
        </div>
        <div className="mt-6 rounded-lg border border-zinc-200 bg-white p-6 text-center font-body text-sm">
          <p className="text-zinc-600">
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
            <Link
              href="/register"
              className="font-semibold text-[#6B80C5] hover:text-opacity-80"
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
