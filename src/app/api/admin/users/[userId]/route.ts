// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/app/api/admin/users/[userId]/route.ts

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { Prisma } from '@prisma/client';
import { authOptions } from '@/lib/auth';
import { deleteUserByAdmin } from '@/lib/admin/users';

const ADMIN_ROLES = new Set(['ADMIN', 'MANAGEMENT']);

interface RouteContext {
  params: {
    userId: string;
  };
}

export async function DELETE(request: Request, { params }: RouteContext) {
  console.log('üîÑ API /admin/users/[id]: –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ', params);
  const session = await getServerSession(authOptions);

  if (!session?.user?.role?.name || !ADMIN_ROLES.has(session.user.role.name)) {
    console.log('‚ùå API /admin/users/[id]: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ');
    return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
  }

  const userId = params.userId;
  if (!userId) {
    return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 400 });
  }

  if (session.user.id === userId) {
    return NextResponse.json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' }, { status: 400 });
  }

  try {
    await deleteUserByAdmin(userId);
    console.log('‚úÖ API /admin/users/[id]: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω', { userId });
    return NextResponse.json({ success: true });
  } catch (error) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      console.warn('‚ö†Ô∏è API /admin/users/[id]: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { userId });
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    console.error('‚ùå API /admin/users/[id]: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞', error);
    return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 500 });
  }
}
