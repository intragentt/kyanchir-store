// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/app/api/admin/users/[userId]/role/route.ts

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { Prisma } from '@prisma/client';
import { z } from 'zod';
import { authOptions } from '@/lib/auth';
import { updateUserRoleByAdmin } from '@/lib/admin/users';

const ADMIN_ROLES = new Set(['ADMIN', 'MANAGEMENT']);

const bodySchema = z.object({
  role: z.string().min(1).max(50),
});

interface RouteContext {
  params: {
    userId: string;
  };
}

export async function PATCH(request: Request, { params }: RouteContext) {
  console.log('üîÑ API /admin/users/[id]/role: –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å', params);
  const session = await getServerSession(authOptions);

  if (!session?.user?.role?.name || !ADMIN_ROLES.has(session.user.role.name)) {
    console.log('‚ùå API /admin/users/[id]/role: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
  }

  const userId = params.userId;
  if (!userId) {
    return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 400 });
  }

  let payload: z.infer<typeof bodySchema>;
  try {
    const data = await request.json();
    payload = bodySchema.parse(data);
  } catch (error) {
    console.error('‚ùå API /admin/users/[id]/role: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', error);
    return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞' }, { status: 400 });
  }

  try {
    await updateUserRoleByAdmin({ userId, roleName: payload.role });

    console.log('‚úÖ API /admin/users/[id]/role: —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { userId, role: payload.role });
    return NextResponse.json({ success: true });
  } catch (error) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      console.warn('‚ö†Ô∏è API /admin/users/[id]/role: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { userId });
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (error instanceof Error && error.message === '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') {
      console.warn('‚ö†Ô∏è API /admin/users/[id]/role: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { role: payload.role });
      return NextResponse.json({ error: '–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 400 });
    }

    console.error('‚ùå API /admin/users/[id]/role: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞', error);
    return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 500 });
  }
}
