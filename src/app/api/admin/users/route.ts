// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/app/api/admin/users/route.ts

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { fetchAdminUsers } from '@/lib/admin/users';

const ADMIN_ROLES = new Set(['ADMIN', 'MANAGEMENT']);

/**
 * üìä API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 *
 * GET: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
 */
export async function GET(request: Request) {
  console.log('üîÑ API /admin/users: –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å');
  const session = await getServerSession(authOptions);

  if (!session?.user?.role?.name || !ADMIN_ROLES.has(session.user.role.name)) {
    console.log('‚ùå API /admin/users: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
  }

  const url = new URL(request.url);
  const params = Object.fromEntries(url.searchParams.entries());

  try {
    const allowedSortKeys = new Set(['createdAt', 'role', 'ordersCount', 'totalSpent', 'lastLoginAt']);
    const sortBy = allowedSortKeys.has(params.sortBy ?? '')
      ? (params.sortBy as any)
      : undefined;

    const result = await fetchAdminUsers({
      page: params.page ? Number.parseInt(params.page, 10) : undefined,
      perPage: params.perPage ? Number.parseInt(params.perPage, 10) : undefined,
      search: params.search,
      role: params.role,
      status: params.status,
      sortBy,
      sortOrder: params.sortOrder === 'asc' ? 'asc' : 'desc',
    });

    console.log('‚úÖ API /admin/users: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞', {
      total: result.total,
      page: result.page,
    });

    return NextResponse.json({
      data: result.users,
      meta: {
        page: result.page,
        perPage: result.perPage,
        total: result.total,
        totalPages: result.totalPages,
      },
      summary: result.summary,
    });
  } catch (error) {
    console.error('‚ùå API /admin/users: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', error);
    return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' }, { status: 500 });
  }
}
