// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/app/api/telegram-webhook/route.ts
// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
import { NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';
import prisma from '@/lib/prisma';

// --- –°–µ–∫—Ä–µ—Ç—ã ---
const token = process.env.TELEGRAM_BOT_TOKEN;
const webhookSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
const baseUrl = process.env.NEXTAUTH_URL;

if (!token || !webhookSecret || !baseUrl) {
  throw new Error('Telegram secrets or NEXTAUTH_URL are not defined in .env');
}

const bot = new TelegramBot(token);

// –≠—Ç–æ –Ω–∞—à "—Å–ª—É—à–∞—é—â–∏–π –ø–æ—Å—Ç". –û–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.
export async function POST(request: Request) {
  try {
    const secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token');
    if (secret !== webhookSecret) {
      return NextResponse.json({ status: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const message = body.message as TelegramBot.Message | undefined;

    if (!message) {
      return NextResponse.json({ status: 'OK' });
    }

    const telegramId = message.chat.id.toString();

    // --- –°–¶–ï–ù–ê–†–ò–ô 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ---
    if (message.contact) {
      const phone = message.contact.phone_number;

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await prisma.user.upsert({
        where: { telegramId },
        update: { phone },
        create: {
          telegramId,
          phone,
          name: message.from?.first_name || 'Telegram User',
        },
      });

      // –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await bot.sendMessage(telegramId, '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', {
        reply_markup: {
          remove_keyboard: true,
        },
      });

      return NextResponse.json({ status: 'OK' });
    }

    // --- –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start ---
    if (message.text?.startsWith('/start')) {
      const loginToken = message.text.split(' ')[1];

      // --- –ü–û–î–°–¶–ï–ù–ê–†–ò–ô 2.1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª —Å "–±–∏–ª–µ—Ç–æ–º" –¥–ª—è –≤—Ö–æ–¥–∞ ---
      if (loginToken) {
        const tokenInDb = await prisma.loginToken.findUnique({
          where: { token: loginToken, expires: { gt: new Date() } },
        });

        if (tokenInDb) {
          // "–ë–∏–ª–µ—Ç" –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!
          const user = await prisma.user.upsert({
            where: { telegramId },
            update: {},
            create: { telegramId, name: message.from?.first_name },
          });

          await prisma.loginToken.update({
            where: { id: tokenInDb.id },
            data: { userId: user.id },
          });

          // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          const successText =
            '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≤—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç.\n\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.';

          await bot.sendMessage(telegramId, successText, {
            reply_markup: {
              keyboard: [
                [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          });
        } else {
          // "–ë–∏–ª–µ—Ç" –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
          await bot.sendMessage(
            telegramId,
            '‚ö†Ô∏è –£–ø—Å! –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –µ–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            {
              reply_markup: {
                remove_keyboard: true,
              },
            },
          );
        }
      } else {
        // --- –ü–û–î–°–¶–ï–ù–ê–†–ò–ô 2.2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ ---
        const welcomeText =
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyanchir Store!\n\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ê –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.';

        await bot.sendMessage(telegramId, welcomeText, {
          reply_markup: {
            keyboard: [
              [
                {
                  text: '–í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
                  web_app: { url: `${baseUrl}/login` },
                },
              ],
              [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
    }

    return NextResponse.json({ status: 'OK' });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    // –ò–∑–±–µ–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –≤ Telegram, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ü–∏–∫–ª
    return NextResponse.json({ status: 'Error' }, { status: 500 });
  }
}
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
