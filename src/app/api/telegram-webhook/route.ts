// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/app/api/telegram-webhook/route.ts
import { NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';
import prisma from '@/lib/prisma';

// --- –°–µ–∫—Ä–µ—Ç—ã ---
const token = process.env.TELEGRAM_BOT_TOKEN;
const webhookSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
const baseUrl = process.env.NEXTAUTH_URL;

export async function POST(request: Request) {
  // --- –ú–ê–Ø–ß–û–ö ‚Ññ1: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω ---
  console.log('--- Webhook received a request ---');

  try {
    if (!token || !webhookSecret || !baseUrl) {
      console.error('CRITICAL: Missing environment variables!');
      throw new Error('Telegram secrets or NEXTAUTH_URL are not defined');
    }

    const bot = new TelegramBot(token);

    const secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token');
    if (secret !== webhookSecret) {
      console.warn('Unauthorized access attempt: Invalid secret token.');
      return NextResponse.json({ status: 'Unauthorized' }, { status: 401 });
    }
    // --- –ú–ê–Ø–ß–û–ö ‚Ññ2: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω ---
    console.log('Secret token is valid.');

    const body = await request.json();
    const message = body.message as TelegramBot.Message | undefined;

    if (!message) {
      console.log(
        'Request body did not contain a message. Exiting gracefully.',
      );
      return NextResponse.json({ status: 'OK' });
    }
    // --- –ú–ê–Ø–ß–û–ö ‚Ññ3: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ---
    console.log(`Message received from chat ID: ${message.chat.id}`);

    const telegramId = message.chat.id.toString();

    // ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è message.contact –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–Ω–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ —Å–µ–π—á–∞—Å) ...

    if (message.text?.startsWith('/start')) {
      // --- –ú–ê–Ø–ß–û–ö ‚Ññ4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
      console.log(`Processing /start command. Full text: "${message.text}"`);

      const loginToken = message.text.split(' ')[1];

      if (loginToken) {
        console.log(`Found login token: ${loginToken}`);
        // ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è /start —Å —Ç–æ–∫–µ–Ω–æ–º) ...
      } else {
        console.log('No login token found, sending welcome message.');
        const welcomeText =
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyanchir Store!\n\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';

        // --- –ú–ê–Ø–ß–û–ö ‚Ññ5: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        console.log(`Attempting to send welcome message to ${telegramId}`);
        await bot.sendMessage(telegramId, welcomeText, {
          reply_markup: {
            keyboard: [
              [{ text: '–í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', web_app: { url: `${baseUrl}/login` } }],
              [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        // --- –ú–ê–Ø–ß–û–ö ‚Ññ6: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ---
        console.log('Welcome message sent successfully.');
      }
    }

    return NextResponse.json({ status: 'OK' });
  } catch (error: any) {
    // --- –ú–ê–Ø–ß–û–ö –û–®–ò–ë–ö–ò: –õ–æ–≤–∏–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ ---
    console.error('!!! --- FATAL WEBHOOK ERROR --- !!!');
    console.error('Error Message:', error.message);
    console.error('Error Stack:', error.stack);
    console.error('Full Error Object:', JSON.stringify(error, null, 2));
    return NextResponse.json({ status: 'Error' }, { status: 500 });
  }
}
