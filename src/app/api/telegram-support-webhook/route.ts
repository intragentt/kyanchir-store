// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/app/api/telegram-support-webhook/route.ts

import { NextResponse } from 'next/server';
import { getBotInstance, setWebhook } from '@/lib/telegramService';
import prisma from '@/lib/prisma';
import TelegramBot from 'node-telegram-bot-api';
import nodemailer from 'nodemailer';
import { SenderType, TicketStatus } from '@prisma/client'; // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω TicketStatus

const bot = getBotInstance();
setWebhook();

// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ /tickets ---
async function handleTicketsCommand(msg: TelegramBot.Message) {
  const { from, chat } = msg;
  if (!from) return;

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(from.id) },
  });
  if (!agent) {
    await bot.sendMessage(
      chat.id,
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ /start',
    );
    return;
  }

  // 2. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
  const openTickets = await prisma.supportTicket.findMany({
    where: {
      status: { in: [TicketStatus.OPEN, TicketStatus.PENDING] },
    },
    orderBy: { createdAt: 'desc' },
    take: 10,
  });

  // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
  if (openTickets.length === 0) {
    await bot.sendMessage(
      chat.id,
      'üéâ –í—Å–µ —Ç–∏–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç.',
    );
    return;
  }

  let responseText = '<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n\n';

  openTickets.forEach((ticket) => {
    responseText += `<b>ID:</b> <code>${ticket.id}</code>\n`;
    responseText += `<b>–¢–µ–º–∞:</b> ${ticket.subject}\n`;
    responseText += `<b>–û—Ç:</b> ${ticket.clientEmail}\n`;
    responseText += `<b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'PENDING' ? '‚è≥ –í —Ä–∞–±–æ—Ç–µ' : 'üÜï –ù–æ–≤—ã–π'}\n`;
    responseText += `--------------------\n`;
  });

  await bot.sendMessage(chat.id, responseText, { parse_mode: 'HTML' });
}
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

async function handleReplyToTicket(msg: TelegramBot.Message) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const { from, chat, text, reply_to_message } = msg;
  if (!from || !text || !reply_to_message || !reply_to_message.text) {
    return;
  }
  const chatId = chat.id;
  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(from.id) },
  });
  if (!agent) {
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    );
    return;
  }
  try {
    const match = reply_to_message.text.match(/start=ticket_([a-zA-Z0-9]+)/);
    if (!match || !match[1]) {‚Äô
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ç–∏–∫–µ—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–∞—Ö.',
  ‚Äô    );
      return;
    }
    const ticketId = match[1];
    const ticket = await prisma.supportTicket.findUnique({
      where: { id: ticketId },
    });
    if (!ticket) {
      await bot.sendMessage(
        chatId,
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç —Å ID: ${ticketId}`,
      );
      return;
    }
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_SERVER_HOST,
      port: parseInt(process.env.EMAIL_SERVER_PORT!),
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD,
      },
    });
    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: ticket.clientEmail,
      subject: `Re: ${ticket.subject}`,
      text: text,
      html: `<p>${text.replace(/\n/g, '<br>')}</p>`,
    });
    await prisma.supportMessage.create({
      data: {
        ticketId: ticket.id,
        content: text,
        senderType: SenderType.AGENT,
        agentId: agent.id,
      },
    });
    await bot.sendMessage(
      chatId,
      `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${ticket.clientEmail}`,
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç:', error);
    await bot.sendMessage(
      chatId,
      'üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞.',
    );
  }
}

async function handleStartCommand(msg: TelegramBot.Message) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  if (!msg.from) return;
  const { id: telegramId, username, first_name: firstName } = msg.from;
  const chatId = msg.chat.id;
  const existingAgent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(telegramId) },
  });
  if (existingAgent) {
    await bot.sendMessage(
      chatId,
      `‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}! –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.`,
    );
    return;
  }
  const potentialAgent = await prisma.supportAgent.findFirst({
    where: { internalUsername: username, telegramId: null },
  });
  if (!potentialAgent) {
    await bot.sendMessage(
      chatId,
      `‚ùå –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.`,
    );
    return;
  }
  const updatedAgent = await prisma.supportAgent.update({
    where: { id: potentialAgent.id },
    data: { telegramId: String(telegramId) },
  });
  await bot.sendMessage(
    chatId,
    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${updatedAgent.name}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö.`,
  );
}

export async function POST(req: Request) {
  const secretToken = req.headers.get('x-telegram-bot-api-secret-token');
  if (secretToken !== process.env.TELEGRAM_SUPPORT_WEBHOOK_SECRET) {
    console.warn('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞.');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await req.json();
    const msg = body.message as TelegramBot.Message | undefined;

    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í –≠–¢–û–ô –í–ï–†–°–ò–ò –ù–£–ñ–ù–û –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨ –ù–ï –¢–û–õ–¨–ö–û –°–û–û–ë–©–ï–ù–ò–Ø, –ù–û –ò –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö
    if (body.callback_query) {
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
      await bot.answerCallbackQuery(body.callback_query.id); // –°–Ω–∞—á–∞–ª–∞ "–æ—Ç–≤–µ—á–∞–µ–º" —Ç–µ–ª–µ–≥—Ä–∞–º—É, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ
      await bot.sendMessage(
        body.callback_query.message.chat.id,
        `(–ó–∞–≥–ª—É—à–∫–∞) –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞.`,
      );
      return NextResponse.json({ status: 'ok' });
    }

    if (!msg || !msg.text) {
      return NextResponse.json({
        message: 'Update is not a message or callback',
      });
    }

    // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –ö–û–ú–ê–ù–î ---
    if (msg.text.startsWith('/start')) {
      await handleStartCommand(msg);
    } else if (msg.text.startsWith('/tickets')) {
      // <-- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
      await handleTicketsCommand(msg);
    } else if (msg.reply_to_message) {
      await handleReplyToTicket(msg);
    } else {
      await bot.sendMessage(
        msg.chat.id,
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /tickets',
      );
    }
    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    return NextResponse.json({ status: 'ok' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 },
    );
  }
}
