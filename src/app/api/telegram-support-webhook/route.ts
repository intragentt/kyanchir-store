// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/app/api/telegram-support-webhook/route.ts

import { NextResponse } from 'next/server';
import { getBotInstance, setWebhook } from '@/lib/telegramService';
import prisma from '@/lib/prisma';
import TelegramBot from 'node-telegram-bot-api';
import nodemailer from 'nodemailer';
import { SenderType, TicketStatus } from '@prisma/client';

const bot = getBotInstance();
setWebhook();

const AGENT_KEYBOARD: TelegramBot.ReplyKeyboardMarkup = {
  keyboard: [
    [{ text: 'üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã (/tickets)' }],
    [{ text: 'üÜò –ü–æ–º–æ—â—å' }],
  ],
  resize_keyboard: true,
};

async function handleCallbackQuery(callbackQuery: TelegramBot.CallbackQuery) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const { data, message, from } = callbackQuery;
  if (!data || !message) return;
  const chatId = message.chat.id;
  const messageId = message.message_id;
  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(from.id) },
  });
  if (!agent) {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.',
    });
    return;
  }
  const [action, type, ticketId] = data.split('_');
  if (action !== 'ticket' || !type || !ticketId) return;
  try {
    let newStatus: TicketStatus | undefined;
    let responseText = '';
    if (type === 'ack') {
      newStatus = TicketStatus.PENDING;
      responseText = `‚è≥ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
    } else if (type === 'close') {
      newStatus = TicketStatus.RESOLVED;
      responseText = `‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
    }
    if (newStatus) {
      await prisma.supportTicket.update({
        where: { id: ticketId },
        data: { status: newStatus },
      });
      await bot.editMessageText(
        `${message.text}\n\n---\n<b>${responseText}</b>`,
        { chat_id: chatId, message_id: messageId, parse_mode: 'HTML' },
      );
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!',
      });
    } else {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
      });
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback'–∞ ${data}:`, error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      show_alert: true,
    });
  }
}

async function handleTicketsCommand(msg: TelegramBot.Message) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const { from, chat } = msg;
  if (!from) return;
  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(from.id) },
  });
  if (!agent) {
    await bot.sendMessage(
      chat.id,
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ /start',
    );
    return;
  }
  const openTickets = await prisma.supportTicket.findMany({
    where: { status: { in: [TicketStatus.OPEN, TicketStatus.PENDING] } },
    orderBy: { createdAt: 'desc' },
    take: 10,
  });
  if (openTickets.length === 0) {
    await bot.sendMessage(
      chat.id,
      'üéâ –í—Å–µ —Ç–∏–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç.',
    );
    return;
  }
  let responseText = '<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n\n';
  openTickets.forEach((ticket) => {
    responseText += `<b>ID:</b> <code>${ticket.id}</code>\n<b>–¢–µ–º–∞:</b> ${ticket.subject}\n<b>–û—Ç:</b> ${ticket.clientEmail}\n<b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'PENDING' ? '‚è≥ –í —Ä–∞–±–æ—Ç–µ' : 'üÜï –ù–æ–≤—ã–π'}\n--------------------\n`;
  });
  await bot.sendMessage(chat.id, responseText, { parse_mode: 'HTML' });
}

async function handleReplyToTicket(msg: TelegramBot.Message) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const { from, chat, text, reply_to_message } = msg;
  if (!from || !text || !reply_to_message || !reply_to_message.text) {
    return;
  }
  const chatId = chat.id;
  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(from.id) },
  });
  if (!agent) {
    await bot.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    );
    return;
  }
  try {
    const match = reply_to_message.text.match(/start=ticket_([a-zA-Z0-9]+)/);
    if (!match || !match[1]) {
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ç–∏–∫–µ—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–∞—Ö.',
      );
      return;
    }
    const ticketId = match[1];
    const ticket = await prisma.supportTicket.findUnique({
      where: { id: ticketId },
    });
    if (!ticket) {
      await bot.sendMessage(
        chatId,
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç —Å ID: ${ticketId}`,
      );
      return;
    }
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_SERVER_HOST,
      port: parseInt(process.env.EMAIL_SERVER_PORT!),
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD,
      },
    });
    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: ticket.clientEmail,
      subject: `Re: ${ticket.subject}`,
      text: text,
      html: `<p>${text.replace(/\n/g, '<br>')}</p>`,
    });
    await prisma.supportMessage.create({
      data: {
        ticketId: ticket.id,
        content: text,
        senderType: SenderType.AGENT,
        agentId: agent.id,
      },
    });
    await bot.sendMessage(
      chatId,
      `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${ticket.clientEmail}`,
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç:', error);
    await bot.sendMessage(
      chatId,
      'üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞.',
    );
  }
}

async function handleStartCommand(msg: TelegramBot.Message) {
  // ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  if (!msg.from) return;
  const { id: telegramId, username, first_name: firstName } = msg.from;
  const chatId = msg.chat.id;
  const existingAgent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(telegramId) },
  });
  if (existingAgent) {
    await bot.sendMessage(
      chatId,
      `‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      { reply_markup: AGENT_KEYBOARD },
    );
    return;
  }
  const potentialAgent = await prisma.supportAgent.findFirst({
    where: { internalUsername: username, telegramId: null },
  });
  if (!potentialAgent) {
    await bot.sendMessage(
      chatId,
      `‚ùå –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}. –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.`,
      { reply_markup: { remove_keyboard: true } },
    );
    return;
  }
  const updatedAgent = await prisma.supportAgent.update({
    where: { id: potentialAgent.id },
    data: { telegramId: String(telegramId) },
  });
  await bot.sendMessage(
    chatId,
    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${updatedAgent.name}! –ê–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.`,
    { reply_markup: AGENT_KEYBOARD },
  );
}

// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø POST ---
export async function POST(req: Request) {
  const secretToken = req.headers.get('x-telegram-bot-api-secret-token');
  if (secretToken !== process.env.TELEGRAM_SUPPORT_WEBHOOK_SECRET) {
    console.warn('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞.');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await req.json();
    const msg = body.message as TelegramBot.Message | undefined;
    const callbackQuery = body.callback_query as
      | TelegramBot.CallbackQuery
      | undefined;

    if (callbackQuery) {
      await handleCallbackQuery(callbackQuery);
      return NextResponse.json({ status: 'ok' });
    }

    if (!msg || !msg.text) {
      return NextResponse.json({ message: 'Update is not a message' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatId –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ–∑–¥–µ
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith('/start')) {
      await handleStartCommand(msg);
    } else if (
      text.startsWith('/tickets') ||
      text.includes('–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã')
    ) {
      await handleTicketsCommand(msg);
    } else if (msg.reply_to_message) {
      await handleReplyToTicket(msg);
    } else {
      await bot.sendMessage(
        chatId,
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –∏–ª–∏ /start, /tickets',
      );
    }

    return NextResponse.json({ status: 'ok' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 },
    );
  }
}
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
