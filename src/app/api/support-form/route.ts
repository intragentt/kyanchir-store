// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/app/api/support-form/route.ts

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { getSupportBot } from '@/lib/telegram'; // <-- –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ Telegraf-–±–æ—Ç—É
import { Markup } from 'telegraf'; // <-- –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

interface SupportFormRequestBody {
  email: string;
  name?: string;
  subject: string;
  content: string;
}

// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ù–æ–≤–∞—è, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async function notifyAgents(ticket: {
  id: string;
  subject: string;
  clientEmail: string;
  assignedEmail: string | null;
}) {
  const agentsToNotify = await prisma.supportAgent.findMany({
    where: {
      telegramId: { not: null },
      role: {
        name: { in: ['ADMIN', 'MANAGEMENT', 'SUPPORT'] },
      },
    },
  });

  if (agentsToNotify.length === 0) {
    console.warn(`–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ ${ticket.id}`);
    return;
  }

  const supportBot = getSupportBot();

  const messageText = `
üì¨ **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!** (–Ω–∞ ${ticket.assignedEmail || 'support'})
<b>–û—Ç:</b> ${ticket.clientEmail}
<b>–¢–µ–º–∞:</b> ${ticket.subject}
<i>ID —Ç–∏–∫–µ—Ç–∞: ${ticket.id}</i>
<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" (Reply), —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É.</i>
  `;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markup –∏–∑ Telegraf –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É ‚è≥', `ticket_ack_${ticket.id}`),
      Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚úÖ', `ticket_close_${ticket.id}`),
    ],
    [
      Markup.button.url(
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ ‚ÜóÔ∏è',
        `${process.env.NEXTAUTH_URL}/admin/mail?ticketId=${ticket.id}`,
      ),
    ],
  ]);

  for (const agent of agentsToNotify) {
    try {
      if (agent.telegramId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π supportBot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await supportBot.telegram.sendMessage(agent.telegramId, messageText, {
          parse_mode: 'HTML',
          ...keyboard,
        });
      }
    } catch (error: any) {
      console.error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É ${agent.name} (ID: ${agent.telegramId}):`,
        error.message,
      );
    }
  }

  console.log(
    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ ${ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${agentsToNotify.length} –∞–≥–µ–Ω—Ç–∞–º.`,
  );
}
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

export async function POST(req: Request) {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É...');

  try {
    const body: SupportFormRequestBody = await req.json();
    const { email, name, subject, content } = body;

    if (!email || !subject || !content) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: email, subject, content' },
        { status: 400 },
      );
    }

    const [openStatus, webFormSource, clientSenderType] = await Promise.all([
      prisma.ticketStatus.findUnique({ where: { name: 'OPEN' } }),
      prisma.ticketSource.findUnique({ where: { name: 'WEB_FORM' } }),
      prisma.senderType.findUnique({ where: { name: 'CLIENT' } }),
    ]);

    if (!openStatus || !webFormSource || !clientSenderType) {
      throw new Error(
        'Critical configuration error: Default records for Status, Source, or SenderType are missing in the database.',
      );
    }

    const assignedEmail = 'support@kyanchir.ru';

    let ticket = await prisma.supportTicket.findFirst({
      where: {
        clientEmail: email,
        status: {
          name: { in: ['OPEN', 'PENDING'] },
        },
      },
    });

    if (!ticket) {
      ticket = await prisma.supportTicket.create({
        data: {
          clientEmail: email,
          clientName: name,
          subject: subject,
          statusId: openStatus.id,
          sourceId: webFormSource.id,
          assignedEmail: assignedEmail,
        },
      });
    }

    await prisma.supportMessage.create({
      data: {
        ticketId: ticket.id,
        content: content,
        senderTypeId: clientSenderType.id,
      },
    });

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é, –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await notifyAgents({
      id: ticket.id,
      subject: ticket.subject,
      clientEmail: ticket.clientEmail,
      assignedEmail: assignedEmail,
    });

    return NextResponse.json(
      { message: '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', ticketId: ticket.id },
      { status: 201 },
    );
  } catch (error) {
    if (error instanceof SyntaxError) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' },
        { status: 400 },
      );
    }
    console.error(
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:',
      error,
    );
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 },
    );
  }
}
