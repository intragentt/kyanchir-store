import { Telegraf, Context, Markup } from 'telegraf';
import crypto from 'crypto';
import { addMinutes } from 'date-fns';
import prisma from '@/lib/prisma';
import nodemailer from 'nodemailer';
import { encrypt } from '@/lib/encryption';

const AGENT_KEYBOARD = Markup.keyboard([
  ['üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã'],
  ['üÜò –ü–æ–º–æ—â—å'],
]).resize();

const TELEGRAM_CHANNEL_URL = 'https://t.me/kyanchiruw';

const NEW_USER_KEYBOARD = Markup.keyboard([
  [Markup.button.contactRequest('üíñ –ü—Ä–∏–Ω—è—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')],
])
  .resize()
  .oneTime();

const LOGGED_IN_MENU_KEYBOARD = Markup.keyboard([
  ['üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', 'üíñ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'],
  ['üíå –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
  ['üßö‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '‚ú® –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã'],
  ['üîë –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞'],
]).resize();

const pendingLoginTokens = new Map<string, string>();

function normalizePhoneNumber(raw: string): string {
  const digits = raw.replace(/[^\d+]/g, '');
  if (digits.startsWith('+')) {
    return digits;
  }
  if (digits.startsWith('8') && digits.length === 11) {
    return `+7${digits.slice(1)}`;
  }
  if (digits.startsWith('7') && digits.length === 11) {
    return `+${digits}`;
  }
  return digits.startsWith('+') ? digits : `+${digits}`;
}

async function sendLoginLink(
  ctx: Context,
  user: { id: string },
  baseUrl: string,
  options?: { introKey?: 'firstTime' | 'refresh' },
) {
  const token = crypto.randomBytes(32).toString('hex');
  const expires = addMinutes(new Date(), 5);

  await prisma.loginToken.create({
    data: {
      token,
      expires,
      userId: user.id,
    },
  });

  const introTextMap: Record<'firstTime' | 'refresh', string> = {
    firstTime:
      '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —É–¥–æ–±–Ω–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∞–π—Ç. –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 5 –º–∏–Ω—É—Ç ‚ú®',
    refresh:
      '–í–æ—Ç –Ω–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û–Ω–∞ —Ç–æ–∂–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë —Å–∫–æ—Ä–µ–µ ‚ú®',
  };

  const message = introTextMap[options?.introKey ?? 'refresh'];
  const loginUrl = `${baseUrl.replace(/\/?$/, '')}/login?token=${token}`;
  const webAppUrl = `${baseUrl.replace(/\/?$/, '')}?token=${token}`;

  await ctx.replyWithHTML(message, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '‚ú® –û—Ç–∫—Ä—ã—Ç—å Mini App',
            web_app: { url: webAppUrl },
          },
        ],
        [
          {
            text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
            url: loginUrl,
          },
        ],
        [
          {
            text: 'üîÑ –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ',
            callback_data: 'regenerate_login_link',
          },
        ],
      ],
    },
  });
}

async function promptForContact(ctx: Context) {
  await ctx.replyWithHTML(
    '–ß—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.',
    NEW_USER_KEYBOARD,
  );
}

async function processPendingToken(
  ctx: Context,
  loginToken: string,
  user: { id: string; phone?: string | null } | null,
  baseUrl: string,
) {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  if (!user || !user.phone) {
    pendingLoginTokens.set(String(telegramId), loginToken);
    await ctx.reply(
      '–ù–∞—à–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ —è –∑–∞–≤–µ—Ä—à—É –≤—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ üíñ',
      NEW_USER_KEYBOARD,
    );
    return;
  }

  const tokenRecord = await prisma.loginToken.findUnique({
    where: { token: loginToken },
  });

  if (!tokenRecord) {
    pendingLoginTokens.delete(String(telegramId));
    await ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
    );
    return;
  }

  if (new Date(tokenRecord.expires) < new Date()) {
    pendingLoginTokens.delete(String(telegramId));
    await ctx.reply(
      '–°—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞ —Å–∞–π—Ç–µ ‚Äî —è –±—É–¥—É –∂–¥–∞—Ç—å –∑–¥–µ—Å—å ‚ú®',
    );
    return;
  }

  await prisma.loginToken.update({
    where: { token: loginToken },
    data: { userId: user.id },
  });

  pendingLoginTokens.delete(String(telegramId));

  await ctx.replyWithHTML(
    '‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç Kyanchir –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Ö–æ–¥ ‚Äî –¥–≤–µ—Ä—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.',
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
              url: `${baseUrl.replace(/\/?$/, '')}/login`,
            },
          ],
          [
            {
              text: '–ù–∞—à —É—é—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ‚ú®',
              url: TELEGRAM_CHANNEL_URL,
            },
          ],
        ],
      },
    },
  );
}

function getRequiredEnv(name: string): string {
  const value = process.env[name];
  if (!value) {
    throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${name} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.`);
  }
  return value;
}

const handleBotError = (error: unknown, botName: string) => {
  console.error(`–û—à–∏–±–∫–∞ –≤ [${botName}]:`, error);
};

let clientBotInstance: Telegraf<Context> | null = null;
let supportBotInstance: Telegraf<Context> | null = null;

function setupClientBot(bot: Telegraf<Context>, baseUrl: string) {
  bot.command('start', async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) {
        return;
      }

      const loginToken = ctx.payload?.trim();
      const user = await prisma.user.findUnique({
        where: { telegramId: String(telegramId) },
      });

      if (loginToken) {
        await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –º–∞–≥–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É...');
        await processPendingToken(ctx, loginToken, user, baseUrl);
        return;
      }

      if (!user || !user.phone) {
        await ctx.replyWithHTML(
          '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≥–∏–¥ –ø–æ Kyanchir. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É ‚ú®',
          NEW_USER_KEYBOARD,
        );
        return;
      }

      await ctx.reply(
        `–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || '–¥—Ä—É–≥'}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?`,
        LOGGED_IN_MENU_KEYBOARD,
      );
      await ctx.reply(
        '–ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ? –ù–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞¬ª, –∏ —è –≤—Å—ë –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é.',
      );
    } catch (error) {
      handleBotError(error, 'ClientBot');
      await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.');
    }
  });

  bot.on('contact', async (ctx) => {
    try {
      const contact = ctx.message?.contact;
      const telegramId = ctx.from?.id;

      if (!contact || !telegramId) {
        return;
      }

      if (contact.user_id !== telegramId) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –Ω–µ —á—É–∂–æ–π.');
        return;
      }

      const phone = normalizePhoneNumber(contact.phone_number);
      const encryptedPhone = encrypt(phone);
      const encryptedName =
        (contact.first_name || ctx.from?.first_name)
          ? encrypt(contact.first_name || ctx.from!.first_name)
          : null;

      const user = await prisma.user.upsert({
        where: { telegramId: String(telegramId) },
        update: {
          phone: encryptedPhone,
          ...(encryptedName ? { name_encrypted: encryptedName } : {}),
        },
        create: {
          telegramId: String(telegramId),
          phone: encryptedPhone,
          ...(encryptedName ? { name_encrypted: encryptedName } : {}),
          role: {
            connect: { name: 'USER' },
          },
        },
      });

      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é —Å–≤–µ–∂—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ üíå',
        LOGGED_IN_MENU_KEYBOARD,
      );

      const pendingToken = pendingLoginTokens.get(String(telegramId));
      if (pendingToken) {
        await ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞...');
        await processPendingToken(ctx, pendingToken, user, baseUrl);
      } else {
        await sendLoginLink(ctx, user, baseUrl, { introKey: 'firstTime' });
        await ctx.reply(
          '–ê –µ—â—ë —É –Ω–∞—Å –µ—Å—Ç—å —É—é—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –ó–∞–≥–ª—è–¥—ã–≤–∞–π—Ç–µ, —á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ ‚ú®',
          Markup.inlineKeyboard([
            [
              {
                text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url: TELEGRAM_CHANNEL_URL,
              },
            ],
          ]),
        );
      }
    } catch (error) {
      handleBotError(error, 'ClientBot');
      await ctx.reply(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      );
    }
  });

  bot.hears('üîë –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞', async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;
      const user = await prisma.user.findUnique({
        where: { telegramId: String(telegramId) },
      });
      if (!user || !user.phone) {
        await promptForContact(ctx);
        return;
      }
      await sendLoginLink(ctx, user, baseUrl);
    } catch (error) {
      handleBotError(error, 'ClientBot');
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ.');
    }
  });

  bot.action('regenerate_login_link', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const telegramId = ctx.from?.id;
      if (!telegramId) return;
      const user = await prisma.user.findUnique({
        where: { telegramId: String(telegramId) },
      });
      if (!user || !user.phone) {
        await promptForContact(ctx);
        return;
      }
      await sendLoginLink(ctx, user, baseUrl);
    } catch (error) {
      handleBotError(error, 'ClientBot');
      await ctx.answerCbQuery('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        show_alert: true,
      });
    }
  });

  bot.hears('üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', async (ctx) => {
    await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é –≤–∏—Ç—Ä–∏–Ω—É Kyanchir ‚ú®', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥',
              web_app: { url: baseUrl.replace(/\/?$/, '') },
            },
          ],
        ],
      },
    });
  });

  bot.hears('üíñ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç', async (ctx) => {
    await ctx.reply(
      '–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–º, —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚ú®',
    );
    const telegramId = ctx.from?.id;
    if (!telegramId) return;
    const user = await prisma.user.findUnique({
      where: { telegramId: String(telegramId) },
    });
    if (!user || !user.phone) {
      await promptForContact(ctx);
      return;
    }
    await sendLoginLink(ctx, user, baseUrl);
  });

  bot.hears('üíå –ú–æ–∏ –∑–∞–∫–∞–∑—ã', async (ctx) => {
    await ctx.reply(
      '–°—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?',
    );
    const telegramId = ctx.from?.id;
    if (!telegramId) return;
    const user = await prisma.user.findUnique({
      where: { telegramId: String(telegramId) },
    });
    if (!user || !user.phone) {
      await promptForContact(ctx);
      return;
    }
    await sendLoginLink(ctx, user, baseUrl);
  });

  bot.hears('üßö‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', async (ctx) => {
    await ctx.reply(
      '–ù–∞—à–∞ —Ñ–µ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏: –Ω–∞–ø–∏—à–∏—Ç–µ @kyanchir_support –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –Ω–∞ —Å–∞–π—Ç–µ üíå',
    );
  });

  bot.hears('‚ú® –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', async (ctx) => {
    await ctx.reply(
      '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞–∑–¥–µ–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ê –ø–æ–∫–∞ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç ‚ú®',
    );
  });

  bot.on('message', async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      return;
    }

    const user = await prisma.user.findUnique({
      where: { telegramId: String(telegramId) },
    });

    if (!user || !user.phone) {
      await promptForContact(ctx);
      return;
    }

    if ('text' in ctx.message) {
      await ctx.reply(
        '–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º–∏ üíñ',
        LOGGED_IN_MENU_KEYBOARD,
      );
    }
  });

  bot.catch((err) => handleBotError(err, 'ClientBot'));
}

function setupSupportBot(bot: Telegraf<Context>) {
  const verifyAgent = async (ctx: Context, next: () => Promise<void>) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const agent = await prisma.supportAgent.findFirst({
      where: { telegramId: String(telegramId) },
    });

    if (!agent) {
      await ctx.reply(
        '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
      );
      return;
    }
    (ctx as any).agent = agent;
    await next();
  };

  bot.command('start', verifyAgent, async (ctx) => {
    await ctx.reply(
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${(ctx as any).agent.name}! –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.`,
      AGENT_KEYBOARD,
    );
  });

  const handleTicketsRequest = async (ctx: Context) => {
    await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤...');
  };
  bot.command('tickets', verifyAgent, handleTicketsRequest);
  bot.hears('üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã', verifyAgent, handleTicketsRequest);

  bot.on('message', verifyAgent, async (ctx) => {
    if (!('text' in ctx.message) || !ctx.message.reply_to_message) {
      return ctx.reply(
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start, /tickets.',
        AGENT_KEYBOARD,
      );
    }

    const text = ctx.message.text;
    const originalMessage = ctx.message.reply_to_message;

    if (!('text' in originalMessage) || !originalMessage.text) return;

    const idMatch = originalMessage.text.match(/ID —Ç–∏–∫–µ—Ç–∞: ([a-zA-Z0-9-]+)/);
    if (!idMatch || !idMatch[1]) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ç–∏–∫–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–∞—Ö.',
      );
    }
    const ticketId = idMatch[1];
    const agent = (ctx as any).agent;

    await prisma.temporaryReply.create({
      data: {
        agentMessageId: BigInt(ctx.message.message_id),
        replyText: text,
        ticketId: ticketId,
        agentId: agent.id,
      },
    });

    const availableEmails = await prisma.supportRoute.findMany({
      select: { kyanchirEmail: true },
    });

    if (availableEmails.length === 0) {
      return ctx.reply('‚ùå –í –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
    }

    const emailButtons = availableEmails.map((route) =>
      Markup.button.callback(
        route.kyanchirEmail,
        `reply_${route.kyanchirEmail}_${ticketId}_${ctx.message.message_id}`,
      ),
    );

    await ctx.reply(
      'üëá –° –∫–∞–∫–æ–π –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?',
      Markup.inlineKeyboard(emailButtons),
    );
  });

  bot.action(/ticket_(ack|close)_(.+)/, verifyAgent, async (ctx) => {
    const agent = (ctx as any).agent;
    const action = ctx.match[1];
    const ticketId = ctx.match[2];
    const originalMessage = ctx.callbackQuery.message;

    if (!originalMessage || !('text' in originalMessage)) {
      await ctx.answerCbQuery(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º.',
        { show_alert: true },
      );
      return;
    }

    let newStatusName: string | undefined;
    let responseText = '';

    if (action === 'ack') {
      newStatusName = 'PENDING';
      responseText = `‚è≥ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
    } else if (action === 'close') {
      newStatusName = 'RESOLVED';
      responseText = `‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
    }

    if (newStatusName) {
      const statusToSet = await prisma.ticketStatus.findUnique({
        where: { name: newStatusName },
      });
      if (!statusToSet) throw new Error(`–°—Ç–∞—Ç—É—Å ${newStatusName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);

      await prisma.supportTicket.update({
        where: { id: ticketId },
        data: { statusId: statusToSet.id },
      });

      await ctx.editMessageText(
        `${originalMessage.text}\n\n---\n<b>${responseText}</b>`,
        { parse_mode: 'HTML' },
      );
      await ctx.answerCbQuery('–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
  });

  bot.action(/reply_(.+)_(.+)_(.+)/, verifyAgent, async (ctx) => {
    const agent = (ctx as any).agent;
    const fromEmail = ctx.match[1];
    const ticketId = ctx.match[2];
    const agentMessageId = BigInt(ctx.match[3]);

    const tempReply = await prisma.temporaryReply.findUnique({
      where: { agentMessageId },
    });

    if (!tempReply) {
      await ctx.editMessageText(
        '‚ùå –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ, —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—Ç–µ—Ä—è–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç –∑–∞–Ω–æ–≤–æ.',
      );
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞', { show_alert: true });
    }

    const ticket = await prisma.supportTicket.findUnique({
      where: { id: ticketId },
    });
    if (!ticket) return;

    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_SERVER_HOST,
      port: parseInt(process.env.EMAIL_SERVER_PORT!),
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD,
      },
    });

    await transporter.sendMail({
      from: `"${agent.name} (Kyanchir Support)" <${fromEmail}>`,
      to: ticket.clientEmail,
      subject: `Re: ${ticket.subject}`,
      text: tempReply.replyText,
      html: `<p>${tempReply.replyText.replace(/\n/g, '<br>')}</p>`,
    });

    const agentSenderType = await prisma.senderType.findUnique({
      where: { name: 'AGENT' },
    });
    if (!agentSenderType) throw new Error('SenderType AGENT –Ω–µ –Ω–∞–π–¥–µ–Ω');

    await prisma.supportMessage.create({
      data: {
        ticketId: ticket.id,
        content: tempReply.replyText,
        senderTypeId: agentSenderType.id,
        agentId: agent.id,
      },
    });

    await prisma.temporaryReply.delete({ where: { agentMessageId } });

    await ctx.editMessageText(
      `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${ticket.clientEmail} —Å –ø–æ—á—Ç—ã <b>${fromEmail}</b>.`,
      { parse_mode: 'HTML' },
    );
    await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  });

  bot.catch((err) => handleBotError(err, 'SupportBot'));
}

export function getClientBot(): Telegraf<Context> {
  if (!clientBotInstance) {
    const token = getRequiredEnv('TELEGRAM_BOT_TOKEN');
    const baseUrl = getRequiredEnv('NEXTAUTH_URL');
    clientBotInstance = new Telegraf(token);
    setupClientBot(clientBotInstance, baseUrl);
    console.log('ü§ñ ClientBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
  }
  return clientBotInstance;
}

export function getSupportBot(): Telegraf<Context> {
  if (!supportBotInstance) {
    const token = getRequiredEnv('TELEGRAM_SUPPORT_BOT_TOKEN');
    supportBotInstance = new Telegraf(token);
    setupSupportBot(supportBotInstance);
    console.log('ü§ñ SupportBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
  }
  return supportBotInstance;
}
