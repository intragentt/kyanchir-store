import { Telegraf, Context, Markup } from 'telegraf';
import prisma from '@/lib/prisma';
import nodemailer from 'nodemailer';

// --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
const clientBotToken = process.env.TELEGRAM_BOT_TOKEN;
if (!clientBotToken) {
  throw new Error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
}

const supportBotToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!supportBotToken) {
  throw new Error(
    '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.',
  );
}

const baseUrl = process.env.NEXTAUTH_URL;
if (!baseUrl) {
  throw new Error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: NEXTAUTH_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–Ω—Å—Ç–∞–Ω—Å–æ–≤ –ë–æ—Ç–æ–≤ ---
export const clientBot = new Telegraf(clientBotToken);
export const supportBot = new Telegraf(supportBotToken);

// ==================================================================
// --- –õ–û–ì–ò–ö–ê –ö–õ–ò–ï–ù–¢–°–ö–û–ì–û –ë–û–¢–ê (ClientBot) ---
// ==================================================================

clientBot.command('start', async (ctx) => {
  // Telegraf —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤ ctx.payload
  const loginToken = ctx.payload;

  if (loginToken) {
    console.log(`[Client Bot] –ù–∞–π–¥–µ–Ω login token: ${loginToken}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É.
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º.
    await ctx.reply(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞...`);
  } else {
    console.log(
      '[Client Bot] –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.',
    );
    const welcomeText =
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyanchir Store!\n\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é —Ö–µ–ª–ø–µ—Ä–æ–≤ Telegraf
    const keyboard = Markup.keyboard([
      [Markup.button.webApp('–í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', `${baseUrl}/login`)],
      [Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º')],
    ])
      .resize()
      .oneTime();

    await ctx.reply(welcomeText, keyboard);
  }
});

// ==================================================================
// --- –õ–û–ì–ò–ö–ê –ë–û–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò (SupportBot) ---
// ==================================================================

const AGENT_KEYBOARD = Markup.keyboard([
  ['üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã'],
  ['üÜò –ü–æ–º–æ—â—å'],
]).resize();

const verifyAgent = async (ctx: Context, next: () => Promise<void>) => {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  const agent = await prisma.supportAgent.findFirst({
    where: { telegramId: String(telegramId) },
  });

  if (!agent) {
    await ctx.reply(
      '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    );
    return;
  }
  (ctx as any).agent = agent;
  await next();
};

supportBot.command('start', verifyAgent, async (ctx) => {
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${(ctx as any).agent.name}! –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.`,
    AGENT_KEYBOARD,
  );
});

const handleTicketsRequest = async (ctx: Context) => {
  await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤...');
};
supportBot.command('tickets', verifyAgent, handleTicketsRequest);
supportBot.hears('üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã', verifyAgent, handleTicketsRequest);

supportBot.on('message', verifyAgent, async (ctx) => {
  if (!('text' in ctx.message) || !ctx.message.reply_to_message) {
    return ctx.reply(
      '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start, /tickets.',
      AGENT_KEYBOARD,
    );
  }

  const text = ctx.message.text;
  const originalMessage = ctx.message.reply_to_message;

  if (!('text' in originalMessage) || !originalMessage.text) return;

  const idMatch = originalMessage.text.match(/ID —Ç–∏–∫–µ—Ç–∞: ([a-zA-Z0-9-]+)/);
  if (!idMatch || !idMatch[1]) {
    return ctx.reply(
      '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ç–∏–∫–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–∞—Ö.',
    );
  }
  const ticketId = idMatch[1];
  const agent = (ctx as any).agent;

  await prisma.temporaryReply.create({
    data: {
      agentMessageId: BigInt(ctx.message.message_id),
      replyText: text,
      ticketId: ticketId,
      agentId: agent.id,
    },
  });

  const availableEmails = await prisma.supportRoute.findMany({
    select: { kyanchirEmail: true },
  });

  if (availableEmails.length === 0) {
    return ctx.reply('‚ùå –í –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
  }

  const emailButtons = availableEmails.map((route) =>
    Markup.button.callback(
      route.kyanchirEmail,
      `reply_${route.kyanchirEmail}_${ticketId}_${ctx.message.message_id}`,
    ),
  );

  await ctx.reply(
    'üëá –° –∫–∞–∫–æ–π –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?',
    Markup.inlineKeyboard(emailButtons),
  );
});

supportBot.action(/ticket_(ack|close)_(.+)/, verifyAgent, async (ctx) => {
  const agent = (ctx as any).agent;
  const action = ctx.match[1];
  const ticketId = ctx.match[2];
  const originalMessage = ctx.callbackQuery.message;

  if (!originalMessage || !('text' in originalMessage)) {
    await ctx.answerCbQuery(
      '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º.',
      { show_alert: true },
    );
    return;
  }

  let newStatusName: string | undefined;
  let responseText = '';

  if (action === 'ack') {
    newStatusName = 'PENDING';
    responseText = `‚è≥ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
  } else if (action === 'close') {
    newStatusName = 'RESOLVED';
    responseText = `‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≥–µ–Ω—Ç–æ–º ${agent.name}`;
  }

  if (newStatusName) {
    const statusToSet = await prisma.ticketStatus.findUnique({
      where: { name: newStatusName },
    });
    if (!statusToSet) throw new Error(`–°—Ç–∞—Ç—É—Å ${newStatusName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);

    await prisma.supportTicket.update({
      where: { id: ticketId },
      data: { statusId: statusToSet.id },
    });

    await ctx.editMessageText(
      `${originalMessage.text}\n\n---\n<b>${responseText}</b>`,
      { parse_mode: 'HTML' },
    );
    await ctx.answerCbQuery('–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!');
  }
});

supportBot.action(/reply_(.+)_(.+)_(.+)/, verifyAgent, async (ctx) => {
  const agent = (ctx as any).agent;
  const fromEmail = ctx.match[1];
  const ticketId = ctx.match[2];
  const agentMessageId = BigInt(ctx.match[3]);

  const tempReply = await prisma.temporaryReply.findUnique({
    where: { agentMessageId },
  });

  if (!tempReply) {
    await ctx.editMessageText(
      '‚ùå –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ, —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—Ç–µ—Ä—è–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç –∑–∞–Ω–æ–≤–æ.',
    );
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞', { show_alert: true });
  }

  const ticket = await prisma.supportTicket.findUnique({
    where: { id: ticketId },
  });
  if (!ticket) return;

  const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_SERVER_HOST,
    port: parseInt(process.env.EMAIL_SERVER_PORT!),
    auth: {
      user: process.env.EMAIL_SERVER_USER,
      pass: process.env.EMAIL_SERVER_PASSWORD,
    },
  });

  await transporter.sendMail({
    from: `"${agent.name} (Kyanchir Support)" <${fromEmail}>`,
    to: ticket.clientEmail,
    subject: `Re: ${ticket.subject}`,
    text: tempReply.replyText,
    html: `<p>${tempReply.replyText.replace(/\n/g, '<br>')}</p>`,
  });

  const agentSenderType = await prisma.senderType.findUnique({
    where: { name: 'AGENT' },
  });
  if (!agentSenderType) throw new Error('SenderType AGENT –Ω–µ –Ω–∞–π–¥–µ–Ω');

  await prisma.supportMessage.create({
    data: {
      ticketId: ticket.id,
      content: tempReply.replyText,
      senderTypeId: agentSenderType.id,
      agentId: agent.id,
    },
  });

  await prisma.temporaryReply.delete({ where: { agentMessageId } });

  await ctx.editMessageText(
    `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${ticket.clientEmail} —Å –ø–æ—á—Ç—ã <b>${fromEmail}</b>.`,
    { parse_mode: 'HTML' },
  );
  await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
});

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ ---
const handleBotError = (error: unknown, botName: string) => {
  console.error(`–û—à–∏–±–∫–∞ –≤ [${botName}]:`, error);
};
clientBot.catch((err, ctx) => handleBotError(err, 'ClientBot'));
supportBot.catch((err, ctx) => handleBotError(err, 'SupportBot'));

console.log('ü§ñ Telegraf-–±–æ—Ç—ã –∏ –∏—Ö –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã...');
