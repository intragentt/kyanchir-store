/**
 * üì° –£–¢–ò–õ–ò–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
 */

export interface MonitoringEvent {
  /**
   * üè∑Ô∏è –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   */
  type: string;
  /**
   * üïí –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
   */
  timestamp: number;
  /**
   * üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  payload?: Record<string, unknown>;
}

const monitoringQueue: MonitoringEvent[] = [];

export function logEvent(event: MonitoringEvent) {
  console.log('üîÑ monitoring.logEvent: —Å–æ–±—ã—Ç–∏–µ', event);
  monitoringQueue.push(event);
}

export function flushEvents() {
  console.log('‚úÖ monitoring.flushEvents: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π', monitoringQueue);
  monitoringQueue.length = 0;
}

export function logError(error: Error, context?: Record<string, unknown>) {
  console.error('‚ùå monitoring.logError: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', error, context);
}

export function getMonitoringSnapshot() {
  return [...monitoringQueue];
}
