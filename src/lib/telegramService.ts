// –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: /src/lib/telegramService.ts

import TelegramBot from 'node-telegram-bot-api';
import prisma from '@/lib/prisma';
import { AgentRole } from '@prisma/client';

const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;

if (!token) {
  throw new Error(
    'TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!',
  );
}

let botInstance: TelegramBot | null = null;

export const getBotInstance = (): TelegramBot => {
  if (!botInstance) {
    botInstance = new TelegramBot(token, { polling: false });
    console.log('ü§ñ –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
  }
  return botInstance;
};

export const setWebhook = async () => {
  const bot = getBotInstance();
  const webhookUrl = `${process.env.NEXTAUTH_URL}/api/telegram-support-webhook`;
  const secretToken = process.env.TELEGRAM_SUPPORT_WEBHOOK_SECRET;

  if (!secretToken) {
    console.warn(
      'TELEGRAM_SUPPORT_WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±—Ö—É–∫ –±—É–¥–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º.',
    );
  }

  try {
    await bot.setWebHook(webhookUrl, { secret_token: secretToken });
    console.log(
      `‚úÖ –í–µ–±—Ö—É–∫ –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: ${webhookUrl}`,
    );

    // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –º–µ–Ω—é Telegram
    await bot.setMyCommands([
      { command: '/start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É' },
      { command: '/tickets', description: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã' },
    ]);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
  } catch (error) {
    console.error(
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞:',
      error,
    );
  }
};

export const notifyAgents = async (
  ticket: {
    id: string;
    subject: string;
    clientEmail: string;
    assignedEmail: string | null;
  },
  assignedRole: AgentRole,
) => {
  const bot = getBotInstance();
  const agentsToNotify = await prisma.supportAgent.findMany({
    where: {
      telegramId: { not: null },
      OR: [{ role: assignedRole }, { role: AgentRole.ADMIN }],
    },
  });
  if (agentsToNotify.length === 0) {
    console.warn(
      `–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ ${ticket.id} —Å —Ä–æ–ª—å—é ${assignedRole}`,
    );
    return;
  }
  const ticketUrl = `https://t.me/kyanchir_uw_maill_bot?start=ticket_${ticket.id}`;
  const messageText = `
üì¨ **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!** (–Ω–∞ ${ticket.assignedEmail || 'support'}) <a href="${ticketUrl}">&#8203;</a>
<b>–û—Ç:</b> ${ticket.clientEmail}
<b>–¢–µ–º–∞:</b> ${ticket.subject}
<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "–û—Ç–≤–µ—Ç–∏—Ç—å" (Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>
  `;
  const keyboard: TelegramBot.InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: '–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É ‚è≥', callback_data: `ticket_ack_${ticket.id}` },
        {
          text: '–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚úÖ',
          callback_data: `ticket_close_${ticket.id}`,
        },
      ],
      [
        {
          text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ ‚ÜóÔ∏è',
          url: `${process.env.NEXTAUTH_URL}/admin/tickets/${ticket.id}`,
        },
      ],
    ],
  };

  for (const agent of agentsToNotify) {
    try {
      if (agent.telegramId) {
        await bot.sendMessage(agent.telegramId, messageText, {
          parse_mode: 'HTML',
          reply_markup: keyboard,
        });
      }
    } catch (error: any) {
      console.error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É ${agent.name} (ID: ${agent.telegramId}):`,
        error.message,
      );
    }
  }

  console.log(
    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ ${ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${agentsToNotify.length} –∞–≥–µ–Ω—Ç–∞–º.`,
  );
};
